import { useState, useRef, useEffect, createElement } from 'react';

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = "\n.simple-donut-chart-widget {\n    align-items: center;\n    display: flex;\n    margin-bottom: 24px;\n    position: relative;\n}\n\n.simple-donut-chart-widget .donut {\n    align-items: center;\n    display: flex;\n    flex: 1;\n    height: 100%;\n    justify-content: center;\n    margin-right: 16px;\n    width: 100%;\n}\n\n.simple-donut-chart-widget .donut-slice {\n    transition: stroke-width 0.2s ease;\n    cursor: pointer;\n}\n\n.simple-donut-chart-widget .simple-donut-chart-info {\n    position: relative;\n}\n\n.simple-donut-chart-widget .linechart-legend {\n    margin-bottom: 30px;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n    width: max-content;\n}\n\n.simple-donut-chart-widget .linechart-legend p:first-of-type {\n    flex: 1;\n    margin-right: 16px;\n}\n\n.simple-donut-chart-widget .linechart-legend li {\n    align-items: center;\n    display: flex;\n    list-style: none;\n}\n\n.simple-donut-chart-widget .linechart-legend li:hover {\n    cursor: pointer;\n}\n\n.simple-donut-chart-widget .linechart-legend p {\n    margin: 0;\n}\n\n.simple-donut-chart-widget .linechart-legend span {\n    border-radius: 50px;\n    display: block;\n    height: 16px;\n    margin-right: 8px;\n    width: 16px;\n}\n\n.simple-donut-chart-widget .linechart-chart {\n    align-self: center;\n    display: flex;\n    grid-template-columns: repeat(100, 1fr);\n    grid-auto-flow: column;\n    margin: 0;\n    padding: 0;\n}\n\n.simple-donut-chart-widget .linechart-chart li {\n    list-style: none;\n    min-height: 20px;\n    position: relative;\n}\n\n.simple-donut-chart-widget .linechart-chart.linechart-chart--rounded li:first-of-type {\n    border-top-left-radius: 50px;\n    border-bottom-left-radius: 50px;\n}\n\n.simple-donut-chart-widget .linechart-chart.linechart-chart--rounded li:last-of-type {\n    border-top-right-radius: 50px;\n    border-bottom-right-radius: 50px;\n}\n\n.simple-donut-chart-widget .linechart-chart li:hover {\n    cursor: pointer;\n}\n\n.simple-donut-chart-widget .linechart-legend li .linechart-tooltip {\n    background-color: white;\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.3);\n    border-radius: 4px;\n    display: flex;\n    left: var(--x);\n    opacity: 0;\n    padding: 4px 8px;\n    position: fixed;\n    pointer-events: none;\n    transition: opacity 0.2s ease, transform 0.2s ease;\n    top: var(--y);\n    will-change: opacity;\n    width: max-content;\n    z-index: 1;\n}\n\n.simple-donut-chart-widget .linechart-legend li .linechart-tooltip.show-tooltip {\n    opacity: 1;\n    transform: translateY(-60%);\n}\n\n.simple-donut-chart-widget .linechart-chart li .linechart-tooltip p {\n    margin: 0;\n    padding: 4px 8px;\n}\n\n.simple-donut-chart-widget .linechart-meter {\n    border-top: solid 1px black;\n    display: flex;\n    justify-content: space-between;\n}\n\n.simple-donut-chart-widget .linechart-meter .item {\n    background-color: black;\n    height: 9px;\n    width: 1px;\n}\n\n.simple-donut-chart-widget .linechart-indicators {\n    display: flex;\n}\n\n.simple-donut-chart-widget .linechart-indicator {\n    flex: 1;\n}\n\n.simple-donut-chart-widget .linechart-indicator:nth-child(2) {\n    text-align: center;\n}\n\n.simple-donut-chart-widget .linechart-indicator:last-of-type {\n    text-align: right;\n}\n\n.simple-donut-chart-widget .linechart-tooltip {\n    position: absolute;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNpbXBsZURvbnV0Q2hhcnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtJQUNJLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2IsT0FBTztJQUNQLFlBQVk7SUFDWix1QkFBdUI7SUFDdkIsa0JBQWtCO0lBQ2xCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGtDQUFrQztJQUNsQyxlQUFlO0FBQ25COztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLFVBQVU7SUFDVixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLE9BQU87SUFDUCxrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxTQUFTO0FBQ2I7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsY0FBYztJQUNkLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsV0FBVztBQUNmOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYix1Q0FBdUM7SUFDdkMsc0JBQXNCO0lBQ3RCLFNBQVM7SUFDVCxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLDRCQUE0QjtJQUM1QiwrQkFBK0I7QUFDbkM7O0FBRUE7SUFDSSw2QkFBNkI7SUFDN0IsZ0NBQWdDO0FBQ3BDOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHVCQUF1QjtJQUN2QiwwQ0FBMEM7SUFDMUMsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixjQUFjO0lBQ2QsVUFBVTtJQUNWLGdCQUFnQjtJQUNoQixlQUFlO0lBQ2Ysb0JBQW9CO0lBQ3BCLGtEQUFrRDtJQUNsRCxhQUFhO0lBQ2Isb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQixVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxVQUFVO0lBQ1YsMkJBQTJCO0FBQy9COztBQUVBO0lBQ0ksU0FBUztJQUNULGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLDJCQUEyQjtJQUMzQixhQUFhO0lBQ2IsOEJBQThCO0FBQ2xDOztBQUVBO0lBQ0ksdUJBQXVCO0lBQ3ZCLFdBQVc7SUFDWCxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksT0FBTztBQUNYOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCIiwiZmlsZSI6IlNpbXBsZURvbnV0Q2hhcnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCB7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi1ib3R0b206IDI0cHg7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAuZG9udXQge1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4OiAxO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gICAgd2lkdGg6IDEwMCU7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5kb251dC1zbGljZSB7XG4gICAgdHJhbnNpdGlvbjogc3Ryb2tlLXdpZHRoIDAuMnMgZWFzZTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5zaW1wbGUtZG9udXQtY2hhcnQtaW5mbyB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWxlZ2VuZCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB3aWR0aDogbWF4LWNvbnRlbnQ7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtbGVnZW5kIHA6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgZmxleDogMTtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtbGVnZW5kIGxpIHtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC1sZWdlbmQgbGk6aG92ZXIge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC1sZWdlbmQgcCB7XG4gICAgbWFyZ2luOiAwO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWxlZ2VuZCBzcGFuIHtcbiAgICBib3JkZXItcmFkaXVzOiA1MHB4O1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGhlaWdodDogMTZweDtcbiAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICB3aWR0aDogMTZweDtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC1jaGFydCB7XG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAwLCAxZnIpO1xuICAgIGdyaWQtYXV0by1mbG93OiBjb2x1bW47XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtY2hhcnQgbGkge1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgbWluLWhlaWdodDogMjBweDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtY2hhcnQubGluZWNoYXJ0LWNoYXJ0LS1yb3VuZGVkIGxpOmZpcnN0LW9mLXR5cGUge1xuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDUwcHg7XG4gICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNTBweDtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC1jaGFydC5saW5lY2hhcnQtY2hhcnQtLXJvdW5kZWQgbGk6bGFzdC1vZi10eXBlIHtcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNTBweDtcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNTBweDtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC1jaGFydCBsaTpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWxlZ2VuZCBsaSAubGluZWNoYXJ0LXRvb2x0aXAge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGJveC1zaGFkb3c6IDAgMnB4IDJweCAwIHJnYmEoMCwgMCwgMCwgMC4zKTtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBsZWZ0OiB2YXIoLS14KTtcbiAgICBvcGFjaXR5OiAwO1xuICAgIHBhZGRpbmc6IDRweCA4cHg7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyBlYXNlLCB0cmFuc2Zvcm0gMC4ycyBlYXNlO1xuICAgIHRvcDogdmFyKC0teSk7XG4gICAgd2lsbC1jaGFuZ2U6IG9wYWNpdHk7XG4gICAgd2lkdGg6IG1heC1jb250ZW50O1xuICAgIHotaW5kZXg6IDE7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtbGVnZW5kIGxpIC5saW5lY2hhcnQtdG9vbHRpcC5zaG93LXRvb2x0aXAge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC02MCUpO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWNoYXJ0IGxpIC5saW5lY2hhcnQtdG9vbHRpcCBwIHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogNHB4IDhweDtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC1tZXRlciB7XG4gICAgYm9yZGVyLXRvcDogc29saWQgMXB4IGJsYWNrO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LW1ldGVyIC5pdGVtIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcbiAgICBoZWlnaHQ6IDlweDtcbiAgICB3aWR0aDogMXB4O1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWluZGljYXRvcnMge1xuICAgIGRpc3BsYXk6IGZsZXg7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtaW5kaWNhdG9yIHtcbiAgICBmbGV4OiAxO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWluZGljYXRvcjpudGgtY2hpbGQoMikge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC1pbmRpY2F0b3I6bGFzdC1vZi10eXBlIHtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC10b29sdGlwIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG4iXX0= */";
styleInject(css_248z);

function SimpleDonutChart({
  context,
  chartValue,
  colors,
  customSortOrder,
  chartName,
  displayTotal,
  sortAttribute,
  sortOrder,
  unit,
  unitPosition
}) {
  const [canRender, setCanRender] = useState(false);
  const containerRef = useRef([]);
  const tooltipRef = useRef([]);
  const colorArray = ["#003f5c", "#2f4b7c", "#665191", "#a05195", "#d45087", "#f95d6a", "#ff7c43", "#ffa600"];
  const [total, setTotal] = useState(0);
  const strokeWidth = 4;
  let currentIndex = 0;
  let preSegmentsTotalLength = 0;
  let sortInstrs = [];

  function setTooltipPosition(event) {
    const cursorSize = 32 / 2;
    const x = event.pageX + cursorSize;
    const y = event.pageY - cursorSize;
    tooltipRef.current[currentIndex].style.setProperty("--x", `${x}px`);
    tooltipRef.current[currentIndex].style.setProperty("--y", `${y}px`);
  }

  function showHghlightPart(currentContainer) {
    currentContainer.style.strokeWidth = strokeWidth + 2;
  }

  function hideHighlightPart(currentContainer) {
    currentContainer.style.strokeWidth = null;
  }

  function showTooltip(index, currentContainer) {
    tooltipRef.current[index].classList.add("show-tooltip");
    currentIndex = index;
    showHghlightPart(currentContainer);
    document.addEventListener("mousemove", setTooltipPosition);
  }

  function hideTooltip(index, currentContainer) {
    tooltipRef.current[index].classList.remove("show-tooltip");
    currentIndex = 0;
    hideHighlightPart(currentContainer);
    document.removeEventListener("mousemove", setTooltipPosition);
  }

  function calcTotal() {
    const totals = [];
    context.items.map((item, index) => totals.push(Number(chartValue.get(context.items[index]).displayValue)));
    setTotal(totals.reduce((a, b) => a + b, 0));
  }

  function setSortOrder() {
    if (!customSortOrder && sortAttribute === "chartName" && chartName.sortable) {
      sortInstrs = [[chartName.id, sortOrder]];
    } else if (!customSortOrder && sortAttribute === "chartValue" && chartValue.sortable) {
      sortInstrs = [[chartValue.id, sortOrder]];
    } else if (customSortOrder && customSortOrder.sortable) {
      sortInstrs = [[customSortOrder.id, sortOrder]];
    }

    context.setSortOrder(sortInstrs);
  }

  useEffect(() => {
    if (context && context.status === "available" && context.items.length > 0) {
      setSortOrder();
      calcTotal();
      setCanRender(true);
    }
  }, [context, colors]);

  if (canRender) {
    const radius = 15.91549430918952;
    const circumference = 2 * Math.PI * radius;
    const startAngle = -90;

    function segmentTotalLength(index) {
      const thisTotal = preSegmentsTotalLength * 360 / total + startAngle;
      preSegmentsTotalLength += Number(Math.round(chartValue.get(context.items[index]).displayValue));
      return thisTotal;
    }

    return createElement("div", {
      className: "simple-donut-chart-widget"
    }, createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      className: "donut",
      viewBox: "0 0 40 40",
      preserveAspectRatio: "xMinYMin meet"
    }, context.items.map((item, index) => createElement("circle", {
      key: item,
      ref: element => containerRef.current[index] = element,
      name: `simpledonutchart-index-${index}`,
      onMouseEnter: () => showTooltip(index, containerRef.current[index]),
      onMouseLeave: () => hideTooltip(index, containerRef.current[index]),
      cx: "20",
      cy: "20",
      class: "donut-slice",
      r: radius,
      "stroke-width": strokeWidth,
      stroke: `var(--linechart-color-${[index]}, ${colors[index] ? colors[index].value : colorArray[index]})`,
      strokeDasharray: Math.round(circumference),
      strokeDashoffset: Math.round(circumference - circumference * chartValue.get(context.items[index]).displayValue / total),
      transform: `rotate(${segmentTotalLength(index)} 20 20)`,
      fill: "none"
    }))), createElement("div", {
      className: "simple-donut-chart-info"
    }, displayTotal && createElement("h1", {
      className: "linechart-total"
    }, unitPosition === "before" && unit && unit, total, unitPosition === "after" && unit && unit), createElement("ul", {
      className: `linechart-legend`
    }, context.items.map((item, index) => createElement("li", {
      key: item,
      name: `linechart-legend-index-${index}`,
      onMouseEnter: () => showHghlightPart(containerRef.current[index]),
      onMouseLeave: () => hideHighlightPart(containerRef.current[index])
    }, createElement("span", {
      style: {
        backgroundColor: `var(--linechart-color-${[index]}, ${colors[index] ? colors[index].value : colorArray[index]})`
      }
    }), createElement("p", null, chartName.get(context.items[index]).displayValue), createElement("p", null, unitPosition === "before" && unit && unit, chartValue.get(context.items[index]).displayValue, unitPosition === "after" && unit && unit), createElement("div", {
      className: "linechart-tooltip",
      ref: element => tooltipRef.current[index] = element
    }, createElement("p", null, chartName.get(context.items[index]).displayValue), createElement("p", null, unitPosition === "before" && unit && unit, chartValue.get(context.items[index]).displayValue, unitPosition === "after" && unit && unit)))))));
  } else {
    return createElement("div", {
      className: "linechart-widget"
    });
  }
}

export { SimpleDonutChart as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
