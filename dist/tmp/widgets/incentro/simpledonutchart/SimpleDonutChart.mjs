import { useState, useRef, useEffect, createElement } from 'react';

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".simple-donut-chart-widget {\n    align-items: center;\n    display: flex;\n    margin-bottom: 24px;\n    position: relative;\n}\n\n.simple-donut-chart-widget .chart-container {\n    position: relative;\n}\n\n.simple-donut-chart-widget .donut-percentage {\n    border-radius: 50%;\n    position: absolute;\n    pointer-events: none;\n    text-align: center;\n    top: 50%;\n    left: 50%;\n    height: 86%;\n    width: 86%;\n    transform-origin: 0 0;\n}\n\n.simple-donut-chart-widget .donut-percentage span {\n    display: inline-block;\n}\n\n.simple-donut-chart-widget .donut {\n    align-items: center;\n    display: flex;\n    flex: 1;\n    height: 100%;\n    justify-content: center;\n    margin-right: 16px;\n    width: 100%;\n}\n\n.simple-donut-chart-widget .donut-slice {\n    transition: stroke-width 0.2s ease;\n    cursor: pointer;\n}\n\n.simple-donut-chart-widget .simple-donut-chart-info {\n    position: relative;\n}\n\n.simple-donut-chart-widget .donutchart-total {\n    font-weight: 700;\n    line-height: 1;\n}\n\n.simple-donut-chart-widget .donutchart-legend {\n    margin-bottom: 30px;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n    width: max-content;\n}\n\n.simple-donut-chart-widget .donutchart-legend p:first-of-type {\n    flex: 1;\n}\n\n.simple-donut-chart-widget .donutchart-legend li {\n    align-items: center;\n    display: flex;\n    list-style: none;\n}\n\n.simple-donut-chart-widget .donutchart-legend li:hover {\n    cursor: pointer;\n}\n\n.simple-donut-chart-widget .donutchart-legend p {\n    margin: 0;\n}\n\n.simple-donut-chart-widget .donutchart-legend span {\n    border-radius: 50px;\n    display: block;\n    height: 16px;\n    margin-right: 8px;\n    width: 16px;\n}\n\n.simple-donut-chart-widget .donutchart-value {\n    padding-left: 16px;\n}\n\n.simple-donut-chart-widget .donutchart-chart {\n    align-self: center;\n    display: flex;\n    grid-template-columns: repeat(100, 1fr);\n    grid-auto-flow: column;\n    margin: 0;\n    padding: 0;\n}\n\n.simple-donut-chart-widget .donutchart-chart li {\n    list-style: none;\n    min-height: 20px;\n    position: relative;\n}\n\n.simple-donut-chart-widget .donutchart-chart.donutchart-chart--rounded li:first-of-type {\n    border-top-left-radius: 50px;\n    border-bottom-left-radius: 50px;\n}\n\n.simple-donut-chart-widget .donutchart-chart.donutchart-chart--rounded li:last-of-type {\n    border-top-right-radius: 50px;\n    border-bottom-right-radius: 50px;\n}\n\n.simple-donut-chart-widget .donutchart-chart li:hover {\n    cursor: pointer;\n}\n\n.simple-donut-chart-widget .donutchart-legend li .donutchart-tooltip {\n    background-color: white;\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.3);\n    border-radius: 4px;\n    display: flex;\n    left: var(--x);\n    opacity: 0;\n    padding: 4px 8px;\n    position: fixed;\n    pointer-events: none;\n    transition: opacity 0.2s ease, transform 0.2s ease;\n    top: var(--y);\n    will-change: opacity;\n    width: max-content;\n    z-index: 1;\n}\n\n.simple-donut-chart-widget .donutchart-legend li .donutchart-tooltip.show-tooltip {\n    opacity: 1;\n    transform: translateY(-60%);\n}\n\n.simple-donut-chart-widget .donutchart-chart li .donutchart-tooltip p {\n    margin: 0;\n    padding: 4px 8px;\n}\n\n.simple-donut-chart-widget .donutchart-meter {\n    border-top: solid 1px black;\n    display: flex;\n    justify-content: space-between;\n}\n\n.simple-donut-chart-widget .donutchart-meter .item {\n    background-color: black;\n    height: 9px;\n    width: 1px;\n}\n\n.simple-donut-chart-widget .donutchart-indicators {\n    display: flex;\n}\n\n.simple-donut-chart-widget .donutchart-indicator {\n    flex: 1;\n}\n\n.simple-donut-chart-widget .donutchart-indicator:nth-child(2) {\n    text-align: center;\n}\n\n.simple-donut-chart-widget .donutchart-indicator:last-of-type {\n    text-align: right;\n}\n\n.simple-donut-chart-widget .donutchart-tooltip {\n    position: absolute;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNpbXBsZURvbnV0Q2hhcnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksbUJBQW1CO0lBQ25CLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixvQkFBb0I7SUFDcEIsa0JBQWtCO0lBQ2xCLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLE9BQU87SUFDUCxZQUFZO0lBQ1osdUJBQXVCO0lBQ3ZCLGtCQUFrQjtJQUNsQixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxrQ0FBa0M7SUFDbEMsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLFVBQVU7SUFDVixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLE9BQU87QUFDWDs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2IsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLFNBQVM7QUFDYjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixjQUFjO0lBQ2QsWUFBWTtJQUNaLGlCQUFpQjtJQUNqQixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLHVDQUF1QztJQUN2QyxzQkFBc0I7SUFDdEIsU0FBUztJQUNULFVBQVU7QUFDZDs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksNEJBQTRCO0lBQzVCLCtCQUErQjtBQUNuQzs7QUFFQTtJQUNJLDZCQUE2QjtJQUM3QixnQ0FBZ0M7QUFDcEM7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksdUJBQXVCO0lBQ3ZCLDBDQUEwQztJQUMxQyxrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLGNBQWM7SUFDZCxVQUFVO0lBQ1YsZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixvQkFBb0I7SUFDcEIsa0RBQWtEO0lBQ2xELGFBQWE7SUFDYixvQkFBb0I7SUFDcEIsa0JBQWtCO0lBQ2xCLFVBQVU7QUFDZDs7QUFFQTtJQUNJLFVBQVU7SUFDViwyQkFBMkI7QUFDL0I7O0FBRUE7SUFDSSxTQUFTO0lBQ1QsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksMkJBQTJCO0lBQzNCLGFBQWE7SUFDYiw4QkFBOEI7QUFDbEM7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIsV0FBVztJQUNYLFVBQVU7QUFDZDs7QUFFQTtJQUNJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxPQUFPO0FBQ1g7O0FBRUE7SUFDSSxrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxrQkFBa0I7QUFDdEIiLCJmaWxlIjoiU2ltcGxlRG9udXRDaGFydC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCB7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi1ib3R0b206IDI0cHg7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAuY2hhcnQtY29udGFpbmVyIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5kb251dC1wZXJjZW50YWdlIHtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB0b3A6IDUwJTtcbiAgICBsZWZ0OiA1MCU7XG4gICAgaGVpZ2h0OiA4NiU7XG4gICAgd2lkdGg6IDg2JTtcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5kb251dC1wZXJjZW50YWdlIHNwYW4ge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmRvbnV0IHtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleDogMTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xuICAgIHdpZHRoOiAxMDAlO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAuZG9udXQtc2xpY2Uge1xuICAgIHRyYW5zaXRpb246IHN0cm9rZS13aWR0aCAwLjJzIGVhc2U7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAuc2ltcGxlLWRvbnV0LWNoYXJ0LWluZm8ge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmRvbnV0Y2hhcnQtdG90YWwge1xuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgbGluZS1oZWlnaHQ6IDE7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5kb251dGNoYXJ0LWxlZ2VuZCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB3aWR0aDogbWF4LWNvbnRlbnQ7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5kb251dGNoYXJ0LWxlZ2VuZCBwOmZpcnN0LW9mLXR5cGUge1xuICAgIGZsZXg6IDE7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5kb251dGNoYXJ0LWxlZ2VuZCBsaSB7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5kb251dGNoYXJ0LWxlZ2VuZCBsaTpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAuZG9udXRjaGFydC1sZWdlbmQgcCB7XG4gICAgbWFyZ2luOiAwO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAuZG9udXRjaGFydC1sZWdlbmQgc3BhbiB7XG4gICAgYm9yZGVyLXJhZGl1czogNTBweDtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBoZWlnaHQ6IDE2cHg7XG4gICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgd2lkdGg6IDE2cHg7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5kb251dGNoYXJ0LXZhbHVlIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDE2cHg7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5kb251dGNoYXJ0LWNoYXJ0IHtcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMDAsIDFmcik7XG4gICAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmRvbnV0Y2hhcnQtY2hhcnQgbGkge1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgbWluLWhlaWdodDogMjBweDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5kb251dGNoYXJ0LWNoYXJ0LmRvbnV0Y2hhcnQtY2hhcnQtLXJvdW5kZWQgbGk6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogNTBweDtcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiA1MHB4O1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAuZG9udXRjaGFydC1jaGFydC5kb251dGNoYXJ0LWNoYXJ0LS1yb3VuZGVkIGxpOmxhc3Qtb2YtdHlwZSB7XG4gICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDUwcHg7XG4gICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDUwcHg7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5kb251dGNoYXJ0LWNoYXJ0IGxpOmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5kb251dGNoYXJ0LWxlZ2VuZCBsaSAuZG9udXRjaGFydC10b29sdGlwIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBib3gtc2hhZG93OiAwIDJweCAycHggMCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbGVmdDogdmFyKC0teCk7XG4gICAgb3BhY2l0eTogMDtcbiAgICBwYWRkaW5nOiA0cHggOHB4O1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMnMgZWFzZSwgdHJhbnNmb3JtIDAuMnMgZWFzZTtcbiAgICB0b3A6IHZhcigtLXkpO1xuICAgIHdpbGwtY2hhbmdlOiBvcGFjaXR5O1xuICAgIHdpZHRoOiBtYXgtY29udGVudDtcbiAgICB6LWluZGV4OiAxO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAuZG9udXRjaGFydC1sZWdlbmQgbGkgLmRvbnV0Y2hhcnQtdG9vbHRpcC5zaG93LXRvb2x0aXAge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC02MCUpO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAuZG9udXRjaGFydC1jaGFydCBsaSAuZG9udXRjaGFydC10b29sdGlwIHAge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiA0cHggOHB4O1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAuZG9udXRjaGFydC1tZXRlciB7XG4gICAgYm9yZGVyLXRvcDogc29saWQgMXB4IGJsYWNrO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAuZG9udXRjaGFydC1tZXRlciAuaXRlbSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XG4gICAgaGVpZ2h0OiA5cHg7XG4gICAgd2lkdGg6IDFweDtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmRvbnV0Y2hhcnQtaW5kaWNhdG9ycyB7XG4gICAgZGlzcGxheTogZmxleDtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmRvbnV0Y2hhcnQtaW5kaWNhdG9yIHtcbiAgICBmbGV4OiAxO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAuZG9udXRjaGFydC1pbmRpY2F0b3I6bnRoLWNoaWxkKDIpIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5kb251dGNoYXJ0LWluZGljYXRvcjpsYXN0LW9mLXR5cGUge1xuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAuZG9udXRjaGFydC10b29sdGlwIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG4iXX0= */";
styleInject(css_248z);

function SimpleDonutChart({
  buttonAction,
  context,
  chartValue,
  colors,
  customSortOrder,
  chartName,
  displayPercentages,
  displayTotal,
  displayValues,
  legendTitle,
  sortAttribute,
  sortOrder,
  unit,
  unitPosition
}) {
  const [canRender, setCanRender] = useState(false);
  const containerRef = useRef([]);
  const tooltipRef = useRef([]);
  const colorArray = ["#003f5c", "#665191", "#a05195", "#d45087", "#f95d6a", "#ff7c43", "#ffa600"];
  const [total, setTotal] = useState(0);
  const strokeWidth = 4;
  const percentageRotate = [];
  let currentIndex = 0;
  let preSegmentsTotalLength = 0;
  let sortInstrs = [];

  function setTooltipPosition(event) {
    const cursorSize = 32 / 2;
    const x = event.pageX + cursorSize;
    const y = event.pageY - cursorSize;
    tooltipRef.current[currentIndex].style.setProperty("--x", `${x}px`);
    tooltipRef.current[currentIndex].style.setProperty("--y", `${y}px`);
  }

  function getChartNumberValue(index) {
    const rawValue = chartValue.get(context.items[index]).displayValue;
    return Number(rawValue.replace(/,/g, "."));
  }

  function showHghlightPart(currentContainer) {
    currentContainer.style.strokeWidth = strokeWidth + 2;
  }

  function hideHighlightPart(currentContainer) {
    currentContainer.style.strokeWidth = null;
  }

  function showTooltip(index, currentContainer) {
    tooltipRef.current[index].classList.add("show-tooltip");
    currentIndex = index;
    showHghlightPart(currentContainer);
    document.addEventListener("mousemove", setTooltipPosition);
  }

  function hideTooltip(index, currentContainer) {
    tooltipRef.current[index].classList.remove("show-tooltip");
    currentIndex = 0;
    hideHighlightPart(currentContainer);
    document.removeEventListener("mousemove", setTooltipPosition);
  }

  function calcTotal() {
    const totals = [];
    context.items.map((item, index) => totals.push(getChartNumberValue(index)));
    setTotal(totals.reduce((a, b) => a + b, 0));
  }

  function setSortOrder() {
    if (!customSortOrder && sortAttribute === "chartName" && chartName.sortable) {
      sortInstrs = [[chartName.id, sortOrder]];
    } else if (!customSortOrder && sortAttribute === "chartValue" && chartValue.sortable) {
      sortInstrs = [[chartValue.id, sortOrder]];
    } else if (customSortOrder && customSortOrder.sortable) {
      sortInstrs = [[customSortOrder.id, sortOrder]];
    }

    context.setSortOrder(sortInstrs);
  }

  function onClick(index) {
    const donutAction = buttonAction.get(context.items[index]);

    if (donutAction && donutAction.canExecute) {
      donutAction.execute();
    }
  }

  function segmentTotalLength(index, startAngle) {
    const thisTotal = preSegmentsTotalLength * 360 / total + startAngle;
    preSegmentsTotalLength += getChartNumberValue(index);
    return thisTotal;
  }

  function rotatePercentage(index) {
    const thisTotal = segmentTotalLength(index, 0) + getChartNumberValue(index) * 360 / total / 2;
    percentageRotate.push(thisTotal);
    return thisTotal;
  }

  function getTextColor(bgColor) {
    var color = bgColor.charAt(0) === "#" ? bgColor.substring(1, 7) : bgColor;
    var r = parseInt(color.substring(0, 2), 16); // hexToR

    var g = parseInt(color.substring(2, 4), 16); // hexToG

    var b = parseInt(color.substring(4, 6), 16); // hexToB

    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? "#000" : "#fff";
  }

  useEffect(() => {
    if (context && context.status === "available" && context.items.length > 0) {
      setSortOrder();
      calcTotal();
    }
  });
  useEffect(() => {
    if (context && context.status === "available" && context.items.length > 0) {
      setCanRender(true);
    }
  }, [context, colors]);

  if (canRender) {
    const radius = 15.91549430918952;
    const circumference = 2 * Math.PI * radius;
    return createElement("div", {
      className: "simple-donut-chart-widget"
    }, createElement("div", {
      className: "chart-container"
    }, displayPercentages && createElement("div", {
      className: "donut-percentages"
    }, context.items.map((item, index) => createElement("div", {
      key: item,
      className: "donut-percentage",
      style: {
        transform: `rotate(${rotatePercentage(index)}deg) translate(-50%, -50%)`
      }
    }, createElement("span", {
      style: {
        transform: `rotate(-${percentageRotate[index]}deg)`,
        color: colors[index] ? getTextColor(colors[index].value) : getTextColor(colorArray[index])
      }
    }, getChartNumberValue(index) >= 5 && `${getChartNumberValue(index)}%`)))), createElement("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      className: "donut",
      viewBox: "0 0 40 40",
      preserveAspectRatio: "xMinYMin meet"
    }, context.items.map((item, index) => createElement("circle", {
      key: item,
      ref: element => containerRef.current[index] = element,
      name: `simpledonutchart-index-${index}`,
      onMouseEnter: () => showTooltip(index, containerRef.current[index]),
      onMouseLeave: () => hideTooltip(index, containerRef.current[index]),
      onClick: () => buttonAction && onClick(index),
      cx: "20",
      cy: "20",
      className: "donut-slice",
      r: radius,
      strokeWidth: strokeWidth,
      stroke: `var(--donutchart-color-${[index]}, ${colors[index] ? colors[index].value : colorArray[index]})`,
      strokeDasharray: circumference,
      strokeDashoffset: circumference - circumference * getChartNumberValue(index) / total,
      transform: `rotate(${segmentTotalLength(index, -90)} 20 20)`,
      fill: "none"
    })))), createElement("div", {
      className: "simple-donut-chart-info"
    }, (displayTotal || legendTitle) && createElement("p", {
      className: "donutchart-total text-large"
    }, displayTotal && unitPosition === "before" && unit && unit, legendTitle && legendTitle.status === "available" && `${legendTitle.value} `, displayTotal && total, displayTotal && unitPosition === "after" && unit && unit), createElement("ul", {
      className: `donutchart-legend`
    }, context.items.map((item, index) => createElement("li", {
      key: item,
      name: `donutchart-legend-index-${index}`,
      onMouseEnter: () => showHghlightPart(containerRef.current[index]),
      onMouseLeave: () => hideHighlightPart(containerRef.current[index])
    }, createElement("span", {
      style: {
        backgroundColor: `var(--donutchart-color-${[index]}, ${colors[index] ? colors[index].value : colorArray[index]})`
      }
    }), createElement("p", null, chartName.get(context.items[index]).displayValue), displayValues && createElement("p", {
      className: "donutchart-value"
    }, unitPosition === "before" && unit && unit, chartValue.get(context.items[index]).displayValue, unitPosition === "after" && unit && unit), createElement("div", {
      className: "donutchart-tooltip",
      ref: element => tooltipRef.current[index] = element
    }, createElement("p", null, chartName.get(context.items[index]).displayValue), displayValues && createElement("p", {
      className: "donutchart-value"
    }, unitPosition === "before" && unit && unit, chartValue.get(context.items[index]).displayValue, unitPosition === "after" && unit && unit)))))));
  } else {
    return createElement("div", {
      className: "donutchart-widget"
    });
  }
}

export { SimpleDonutChart as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
