define(['react'], (function (react) { 'use strict';

  function styleInject(css, ref) {
    if (ref === void 0) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') {
      return;
    }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z = "\n.simple-donut-chart-widget {\n    align-items: center;\n    display: flex;\n    margin-bottom: 24px;\n    position: relative;\n}\n\n.simple-donut-chart-widget .donut {\n    align-items: center;\n    display: flex;\n    flex: 1;\n    height: 100%;\n    justify-content: center;\n    margin-right: 16px;\n    width: 100%;\n}\n\n.simple-donut-chart-widget .donut-slice {\n    transition: stroke-width 0.2s ease;\n    cursor: pointer;\n}\n\n.simple-donut-chart-widget .simple-donut-chart-info {\n    position: relative;\n}\n\n.simple-donut-chart-widget .linechart-legend {\n    margin-bottom: 30px;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n    width: max-content;\n}\n\n.simple-donut-chart-widget .linechart-legend p:first-of-type {\n    flex: 1;\n    margin-right: 16px;\n}\n\n.simple-donut-chart-widget .linechart-legend li {\n    align-items: center;\n    display: flex;\n    list-style: none;\n}\n\n.simple-donut-chart-widget .linechart-legend li:hover {\n    cursor: pointer;\n}\n\n.simple-donut-chart-widget .linechart-legend p {\n    margin: 0;\n}\n\n.simple-donut-chart-widget .linechart-legend span {\n    border-radius: 50px;\n    display: block;\n    height: 16px;\n    margin-right: 8px;\n    width: 16px;\n}\n\n.simple-donut-chart-widget .linechart-chart {\n    align-self: center;\n    display: flex;\n    grid-template-columns: repeat(100, 1fr);\n    grid-auto-flow: column;\n    margin: 0;\n    padding: 0;\n}\n\n.simple-donut-chart-widget .linechart-chart li {\n    list-style: none;\n    min-height: 20px;\n    position: relative;\n}\n\n.simple-donut-chart-widget .linechart-chart.linechart-chart--rounded li:first-of-type {\n    border-top-left-radius: 50px;\n    border-bottom-left-radius: 50px;\n}\n\n.simple-donut-chart-widget .linechart-chart.linechart-chart--rounded li:last-of-type {\n    border-top-right-radius: 50px;\n    border-bottom-right-radius: 50px;\n}\n\n.simple-donut-chart-widget .linechart-chart li:hover {\n    cursor: pointer;\n}\n\n.simple-donut-chart-widget .linechart-legend li .linechart-tooltip {\n    background-color: white;\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.3);\n    border-radius: 4px;\n    display: flex;\n    left: var(--x);\n    opacity: 0;\n    padding: 4px 8px;\n    position: fixed;\n    pointer-events: none;\n    transition: opacity 0.2s ease, transform 0.2s ease;\n    top: var(--y);\n    will-change: opacity;\n    width: max-content;\n    z-index: 1;\n}\n\n.simple-donut-chart-widget .linechart-legend li .linechart-tooltip.show-tooltip {\n    opacity: 1;\n    transform: translateY(-60%);\n}\n\n.simple-donut-chart-widget .linechart-chart li .linechart-tooltip p {\n    margin: 0;\n    padding: 4px 8px;\n}\n\n.simple-donut-chart-widget .linechart-meter {\n    border-top: solid 1px black;\n    display: flex;\n    justify-content: space-between;\n}\n\n.simple-donut-chart-widget .linechart-meter .item {\n    background-color: black;\n    height: 9px;\n    width: 1px;\n}\n\n.simple-donut-chart-widget .linechart-indicators {\n    display: flex;\n}\n\n.simple-donut-chart-widget .linechart-indicator {\n    flex: 1;\n}\n\n.simple-donut-chart-widget .linechart-indicator:nth-child(2) {\n    text-align: center;\n}\n\n.simple-donut-chart-widget .linechart-indicator:last-of-type {\n    text-align: right;\n}\n\n.simple-donut-chart-widget .linechart-tooltip {\n    position: absolute;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNpbXBsZURvbnV0Q2hhcnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtJQUNJLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2IsT0FBTztJQUNQLFlBQVk7SUFDWix1QkFBdUI7SUFDdkIsa0JBQWtCO0lBQ2xCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGtDQUFrQztJQUNsQyxlQUFlO0FBQ25COztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLFVBQVU7SUFDVixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLE9BQU87SUFDUCxrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxTQUFTO0FBQ2I7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsY0FBYztJQUNkLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsV0FBVztBQUNmOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYix1Q0FBdUM7SUFDdkMsc0JBQXNCO0lBQ3RCLFNBQVM7SUFDVCxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLDRCQUE0QjtJQUM1QiwrQkFBK0I7QUFDbkM7O0FBRUE7SUFDSSw2QkFBNkI7SUFDN0IsZ0NBQWdDO0FBQ3BDOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHVCQUF1QjtJQUN2QiwwQ0FBMEM7SUFDMUMsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixjQUFjO0lBQ2QsVUFBVTtJQUNWLGdCQUFnQjtJQUNoQixlQUFlO0lBQ2Ysb0JBQW9CO0lBQ3BCLGtEQUFrRDtJQUNsRCxhQUFhO0lBQ2Isb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQixVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxVQUFVO0lBQ1YsMkJBQTJCO0FBQy9COztBQUVBO0lBQ0ksU0FBUztJQUNULGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLDJCQUEyQjtJQUMzQixhQUFhO0lBQ2IsOEJBQThCO0FBQ2xDOztBQUVBO0lBQ0ksdUJBQXVCO0lBQ3ZCLFdBQVc7SUFDWCxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksT0FBTztBQUNYOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCIiwiZmlsZSI6IlNpbXBsZURvbnV0Q2hhcnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCB7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi1ib3R0b206IDI0cHg7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAuZG9udXQge1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4OiAxO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gICAgd2lkdGg6IDEwMCU7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5kb251dC1zbGljZSB7XG4gICAgdHJhbnNpdGlvbjogc3Ryb2tlLXdpZHRoIDAuMnMgZWFzZTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5zaW1wbGUtZG9udXQtY2hhcnQtaW5mbyB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWxlZ2VuZCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB3aWR0aDogbWF4LWNvbnRlbnQ7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtbGVnZW5kIHA6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgZmxleDogMTtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtbGVnZW5kIGxpIHtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC1sZWdlbmQgbGk6aG92ZXIge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC1sZWdlbmQgcCB7XG4gICAgbWFyZ2luOiAwO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWxlZ2VuZCBzcGFuIHtcbiAgICBib3JkZXItcmFkaXVzOiA1MHB4O1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGhlaWdodDogMTZweDtcbiAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICB3aWR0aDogMTZweDtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC1jaGFydCB7XG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAwLCAxZnIpO1xuICAgIGdyaWQtYXV0by1mbG93OiBjb2x1bW47XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtY2hhcnQgbGkge1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgbWluLWhlaWdodDogMjBweDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtY2hhcnQubGluZWNoYXJ0LWNoYXJ0LS1yb3VuZGVkIGxpOmZpcnN0LW9mLXR5cGUge1xuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDUwcHg7XG4gICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNTBweDtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC1jaGFydC5saW5lY2hhcnQtY2hhcnQtLXJvdW5kZWQgbGk6bGFzdC1vZi10eXBlIHtcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNTBweDtcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNTBweDtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC1jaGFydCBsaTpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWxlZ2VuZCBsaSAubGluZWNoYXJ0LXRvb2x0aXAge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGJveC1zaGFkb3c6IDAgMnB4IDJweCAwIHJnYmEoMCwgMCwgMCwgMC4zKTtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBsZWZ0OiB2YXIoLS14KTtcbiAgICBvcGFjaXR5OiAwO1xuICAgIHBhZGRpbmc6IDRweCA4cHg7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyBlYXNlLCB0cmFuc2Zvcm0gMC4ycyBlYXNlO1xuICAgIHRvcDogdmFyKC0teSk7XG4gICAgd2lsbC1jaGFuZ2U6IG9wYWNpdHk7XG4gICAgd2lkdGg6IG1heC1jb250ZW50O1xuICAgIHotaW5kZXg6IDE7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtbGVnZW5kIGxpIC5saW5lY2hhcnQtdG9vbHRpcC5zaG93LXRvb2x0aXAge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC02MCUpO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWNoYXJ0IGxpIC5saW5lY2hhcnQtdG9vbHRpcCBwIHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogNHB4IDhweDtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC1tZXRlciB7XG4gICAgYm9yZGVyLXRvcDogc29saWQgMXB4IGJsYWNrO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LW1ldGVyIC5pdGVtIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcbiAgICBoZWlnaHQ6IDlweDtcbiAgICB3aWR0aDogMXB4O1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWluZGljYXRvcnMge1xuICAgIGRpc3BsYXk6IGZsZXg7XG59XG5cbi5zaW1wbGUtZG9udXQtY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtaW5kaWNhdG9yIHtcbiAgICBmbGV4OiAxO1xufVxuXG4uc2ltcGxlLWRvbnV0LWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWluZGljYXRvcjpudGgtY2hpbGQoMikge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC1pbmRpY2F0b3I6bGFzdC1vZi10eXBlIHtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbn1cblxuLnNpbXBsZS1kb251dC1jaGFydC13aWRnZXQgLmxpbmVjaGFydC10b29sdGlwIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG4iXX0= */";
  styleInject(css_248z);

  function SimpleDonutChart({
    context,
    chartValue,
    colors,
    customSortOrder,
    chartName,
    displayTotal,
    sortAttribute,
    sortOrder,
    unit,
    unitPosition
  }) {
    const [canRender, setCanRender] = react.useState(false);
    const containerRef = react.useRef([]);
    const tooltipRef = react.useRef([]);
    const colorArray = ["#003f5c", "#2f4b7c", "#665191", "#a05195", "#d45087", "#f95d6a", "#ff7c43", "#ffa600"];
    const [total, setTotal] = react.useState(0);
    const strokeWidth = 4;
    let currentIndex = 0;
    let preSegmentsTotalLength = 0;
    let sortInstrs = [];

    function setTooltipPosition(event) {
      const cursorSize = 32 / 2;
      const x = event.pageX + cursorSize;
      const y = event.pageY - cursorSize;
      tooltipRef.current[currentIndex].style.setProperty("--x", `${x}px`);
      tooltipRef.current[currentIndex].style.setProperty("--y", `${y}px`);
    }

    function showHghlightPart(currentContainer) {
      currentContainer.style.strokeWidth = strokeWidth + 2;
    }

    function hideHighlightPart(currentContainer) {
      currentContainer.style.strokeWidth = null;
    }

    function showTooltip(index, currentContainer) {
      tooltipRef.current[index].classList.add("show-tooltip");
      currentIndex = index;
      showHghlightPart(currentContainer);
      document.addEventListener("mousemove", setTooltipPosition);
    }

    function hideTooltip(index, currentContainer) {
      tooltipRef.current[index].classList.remove("show-tooltip");
      currentIndex = 0;
      hideHighlightPart(currentContainer);
      document.removeEventListener("mousemove", setTooltipPosition);
    }

    function calcTotal() {
      const totals = [];
      context.items.map((item, index) => totals.push(Number(chartValue.get(context.items[index]).displayValue)));
      setTotal(totals.reduce((a, b) => a + b, 0));
    }

    function setSortOrder() {
      if (!customSortOrder && sortAttribute === "chartName" && chartName.sortable) {
        sortInstrs = [[chartName.id, sortOrder]];
      } else if (!customSortOrder && sortAttribute === "chartValue" && chartValue.sortable) {
        sortInstrs = [[chartValue.id, sortOrder]];
      } else if (customSortOrder && customSortOrder.sortable) {
        sortInstrs = [[customSortOrder.id, sortOrder]];
      }

      context.setSortOrder(sortInstrs);
    }

    react.useEffect(() => {
      if (context && context.status === "available" && context.items.length > 0) {
        setSortOrder();
        calcTotal();
        setCanRender(true);
      }
    }, [context, colors]);

    if (canRender) {
      const radius = 15.91549430918952;
      const circumference = 2 * Math.PI * radius;
      const startAngle = -90;

      function segmentTotalLength(index) {
        const thisTotal = preSegmentsTotalLength * 360 / total + startAngle;
        preSegmentsTotalLength += Number(Math.round(chartValue.get(context.items[index]).displayValue));
        return thisTotal;
      }

      return react.createElement("div", {
        className: "simple-donut-chart-widget"
      }, react.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        className: "donut",
        viewBox: "0 0 40 40",
        preserveAspectRatio: "xMinYMin meet"
      }, context.items.map((item, index) => react.createElement("circle", {
        key: item,
        ref: element => containerRef.current[index] = element,
        name: `simpledonutchart-index-${index}`,
        onMouseEnter: () => showTooltip(index, containerRef.current[index]),
        onMouseLeave: () => hideTooltip(index, containerRef.current[index]),
        cx: "20",
        cy: "20",
        class: "donut-slice",
        r: radius,
        "stroke-width": strokeWidth,
        stroke: `var(--linechart-color-${[index]}, ${colors[index] ? colors[index].value : colorArray[index]})`,
        strokeDasharray: Math.round(circumference),
        strokeDashoffset: Math.round(circumference - circumference * chartValue.get(context.items[index]).displayValue / total),
        transform: `rotate(${segmentTotalLength(index)} 20 20)`,
        fill: "none"
      }))), react.createElement("div", {
        className: "simple-donut-chart-info"
      }, displayTotal && react.createElement("h1", {
        className: "linechart-total"
      }, unitPosition === "before" && unit && unit, total, unitPosition === "after" && unit && unit), react.createElement("ul", {
        className: `linechart-legend`
      }, context.items.map((item, index) => react.createElement("li", {
        key: item,
        name: `linechart-legend-index-${index}`,
        onMouseEnter: () => showHghlightPart(containerRef.current[index]),
        onMouseLeave: () => hideHighlightPart(containerRef.current[index])
      }, react.createElement("span", {
        style: {
          backgroundColor: `var(--linechart-color-${[index]}, ${colors[index] ? colors[index].value : colorArray[index]})`
        }
      }), react.createElement("p", null, chartName.get(context.items[index]).displayValue), react.createElement("p", null, unitPosition === "before" && unit && unit, chartValue.get(context.items[index]).displayValue, unitPosition === "after" && unit && unit), react.createElement("div", {
        className: "linechart-tooltip",
        ref: element => tooltipRef.current[index] = element
      }, react.createElement("p", null, chartName.get(context.items[index]).displayValue), react.createElement("p", null, unitPosition === "before" && unit && unit, chartValue.get(context.items[index]).displayValue, unitPosition === "after" && unit && unit)))))));
    } else {
      return react.createElement("div", {
        className: "linechart-widget"
      });
    }
  }

  return SimpleDonutChart;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2ltcGxlRG9udXRDaGFydC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWluamVjdC9kaXN0L3N0eWxlLWluamVjdC5lcy5qcyIsIi4uLy4uLy4uLy4uLy4uL3NyYy9TaW1wbGVEb251dENoYXJ0LmpzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzdHlsZUluamVjdChjc3MsIHJlZikge1xuICBpZiAoIHJlZiA9PT0gdm9pZCAwICkgcmVmID0ge307XG4gIHZhciBpbnNlcnRBdCA9IHJlZi5pbnNlcnRBdDtcblxuICBpZiAoIWNzcyB8fCB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybjsgfVxuXG4gIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcblxuICBpZiAoaW5zZXJ0QXQgPT09ICd0b3AnKSB7XG4gICAgaWYgKGhlYWQuZmlyc3RDaGlsZCkge1xuICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGUsIGhlYWQuZmlyc3RDaGlsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlSW5qZWN0O1xuIiwiaW1wb3J0IFwiLi91aS9TaW1wbGVEb251dENoYXJ0LmNzc1wiO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNpbXBsZURvbnV0Q2hhcnQoe1xuICAgIGNvbnRleHQsXG4gICAgY2hhcnRWYWx1ZSxcbiAgICBjb2xvcnMsXG4gICAgY3VzdG9tU29ydE9yZGVyLFxuICAgIGNoYXJ0TmFtZSxcbiAgICBkaXNwbGF5VG90YWwsXG4gICAgc29ydEF0dHJpYnV0ZSxcbiAgICBzb3J0T3JkZXIsXG4gICAgdW5pdCxcbiAgICB1bml0UG9zaXRpb25cbn0pIHtcbiAgICBjb25zdCBbY2FuUmVuZGVyLCBzZXRDYW5SZW5kZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGNvbnRhaW5lclJlZiA9IHVzZVJlZihbXSk7XG4gICAgY29uc3QgdG9vbHRpcFJlZiA9IHVzZVJlZihbXSk7XG4gICAgY29uc3QgY29sb3JBcnJheSA9IFtcIiMwMDNmNWNcIiwgXCIjMmY0YjdjXCIsIFwiIzY2NTE5MVwiLCBcIiNhMDUxOTVcIiwgXCIjZDQ1MDg3XCIsIFwiI2Y5NWQ2YVwiLCBcIiNmZjdjNDNcIiwgXCIjZmZhNjAwXCJdO1xuICAgIGNvbnN0IFt0b3RhbCwgc2V0VG90YWxdID0gdXNlU3RhdGUoMCk7XG4gICAgY29uc3Qgc3Ryb2tlV2lkdGggPSA0O1xuICAgIGxldCBjdXJyZW50SW5kZXggPSAwO1xuICAgIGxldCBwcmVTZWdtZW50c1RvdGFsTGVuZ3RoID0gMDtcbiAgICBsZXQgc29ydEluc3RycyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gc2V0VG9vbHRpcFBvc2l0aW9uKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGN1cnNvclNpemUgPSAzMiAvIDI7XG4gICAgICAgIGNvbnN0IHggPSBldmVudC5wYWdlWCArIGN1cnNvclNpemU7XG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5wYWdlWSAtIGN1cnNvclNpemU7XG4gICAgICAgIHRvb2x0aXBSZWYuY3VycmVudFtjdXJyZW50SW5kZXhdLnN0eWxlLnNldFByb3BlcnR5KFwiLS14XCIsIGAke3h9cHhgKTtcbiAgICAgICAgdG9vbHRpcFJlZi5jdXJyZW50W2N1cnJlbnRJbmRleF0uc3R5bGUuc2V0UHJvcGVydHkoXCItLXlcIiwgYCR7eX1weGApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3dIZ2hsaWdodFBhcnQoY3VycmVudENvbnRhaW5lcikge1xuICAgICAgICBjdXJyZW50Q29udGFpbmVyLnN0eWxlLnN0cm9rZVdpZHRoID0gc3Ryb2tlV2lkdGggKyAyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhpZGVIaWdobGlnaHRQYXJ0KGN1cnJlbnRDb250YWluZXIpIHtcbiAgICAgICAgY3VycmVudENvbnRhaW5lci5zdHlsZS5zdHJva2VXaWR0aCA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvd1Rvb2x0aXAoaW5kZXgsIGN1cnJlbnRDb250YWluZXIpIHtcbiAgICAgICAgdG9vbHRpcFJlZi5jdXJyZW50W2luZGV4XS5jbGFzc0xpc3QuYWRkKFwic2hvdy10b29sdGlwXCIpO1xuICAgICAgICBjdXJyZW50SW5kZXggPSBpbmRleDtcbiAgICAgICAgc2hvd0hnaGxpZ2h0UGFydChjdXJyZW50Q29udGFpbmVyKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBzZXRUb29sdGlwUG9zaXRpb24pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhpZGVUb29sdGlwKGluZGV4LCBjdXJyZW50Q29udGFpbmVyKSB7XG4gICAgICAgIHRvb2x0aXBSZWYuY3VycmVudFtpbmRleF0uY2xhc3NMaXN0LnJlbW92ZShcInNob3ctdG9vbHRpcFwiKTtcbiAgICAgICAgY3VycmVudEluZGV4ID0gMDtcbiAgICAgICAgaGlkZUhpZ2hsaWdodFBhcnQoY3VycmVudENvbnRhaW5lcik7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgc2V0VG9vbHRpcFBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxjVG90YWwoKSB7XG4gICAgICAgIGNvbnN0IHRvdGFscyA9IFtdO1xuICAgICAgICBjb250ZXh0Lml0ZW1zLm1hcCgoaXRlbSwgaW5kZXgpID0+IHRvdGFscy5wdXNoKE51bWJlcihjaGFydFZhbHVlLmdldChjb250ZXh0Lml0ZW1zW2luZGV4XSkuZGlzcGxheVZhbHVlKSkpO1xuICAgICAgICBzZXRUb3RhbCh0b3RhbHMucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFNvcnRPcmRlcigpIHtcbiAgICAgICAgaWYgKCFjdXN0b21Tb3J0T3JkZXIgJiYgc29ydEF0dHJpYnV0ZSA9PT0gXCJjaGFydE5hbWVcIiAmJiBjaGFydE5hbWUuc29ydGFibGUpIHtcbiAgICAgICAgICAgIHNvcnRJbnN0cnMgPSBbW2NoYXJ0TmFtZS5pZCwgc29ydE9yZGVyXV07XG4gICAgICAgIH0gZWxzZSBpZiAoIWN1c3RvbVNvcnRPcmRlciAmJiBzb3J0QXR0cmlidXRlID09PSBcImNoYXJ0VmFsdWVcIiAmJiBjaGFydFZhbHVlLnNvcnRhYmxlKSB7XG4gICAgICAgICAgICBzb3J0SW5zdHJzID0gW1tjaGFydFZhbHVlLmlkLCBzb3J0T3JkZXJdXTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXN0b21Tb3J0T3JkZXIgJiYgY3VzdG9tU29ydE9yZGVyLnNvcnRhYmxlKSB7XG4gICAgICAgICAgICBzb3J0SW5zdHJzID0gW1tjdXN0b21Tb3J0T3JkZXIuaWQsIHNvcnRPcmRlcl1dO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuc2V0U29ydE9yZGVyKHNvcnRJbnN0cnMpO1xuICAgIH1cblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuc3RhdHVzID09PSBcImF2YWlsYWJsZVwiICYmIGNvbnRleHQuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2V0U29ydE9yZGVyKCk7XG4gICAgICAgICAgICBjYWxjVG90YWwoKTtcbiAgICAgICAgICAgIHNldENhblJlbmRlcih0cnVlKTtcbiAgICAgICAgfVxuICAgIH0sIFtjb250ZXh0LCBjb2xvcnNdKTtcblxuICAgIGlmIChjYW5SZW5kZXIpIHtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gMTUuOTE1NDk0MzA5MTg5NTI7XG4gICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSAyICogTWF0aC5QSSAqIHJhZGl1cztcbiAgICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IC05MDtcblxuICAgICAgICBmdW5jdGlvbiBzZWdtZW50VG90YWxMZW5ndGgoaW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNUb3RhbCA9IChwcmVTZWdtZW50c1RvdGFsTGVuZ3RoICogMzYwKSAvIHRvdGFsICsgc3RhcnRBbmdsZTtcbiAgICAgICAgICAgIHByZVNlZ21lbnRzVG90YWxMZW5ndGggKz0gTnVtYmVyKE1hdGgucm91bmQoY2hhcnRWYWx1ZS5nZXQoY29udGV4dC5pdGVtc1tpbmRleF0pLmRpc3BsYXlWYWx1ZSkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNUb3RhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpbXBsZS1kb251dC1jaGFydC13aWRnZXRcIj5cbiAgICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkb251dFwiXG4gICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgNDAgNDBcIlxuICAgICAgICAgICAgICAgICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pbllNaW4gbWVldFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7Y29udGV4dC5pdGVtcy5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8Y2lyY2xlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpdGVtfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17ZWxlbWVudCA9PiAoY29udGFpbmVyUmVmLmN1cnJlbnRbaW5kZXhdID0gZWxlbWVudCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17YHNpbXBsZWRvbnV0Y2hhcnQtaW5kZXgtJHtpbmRleH1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcj17KCkgPT4gc2hvd1Rvb2x0aXAoaW5kZXgsIGNvbnRhaW5lclJlZi5jdXJyZW50W2luZGV4XSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXsoKSA9PiBoaWRlVG9vbHRpcChpbmRleCwgY29udGFpbmVyUmVmLmN1cnJlbnRbaW5kZXhdKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjeD1cIjIwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjeT1cIjIwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImRvbnV0LXNsaWNlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByPXtyYWRpdXN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlLXdpZHRoPXtzdHJva2VXaWR0aH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U9e2B2YXIoLS1saW5lY2hhcnQtY29sb3ItJHtbaW5kZXhdfSwgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzW2luZGV4XSA/IGNvbG9yc1tpbmRleF0udmFsdWUgOiBjb2xvckFycmF5W2luZGV4XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pYH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VEYXNoYXJyYXk9e01hdGgucm91bmQoY2lyY3VtZmVyZW5jZSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlRGFzaG9mZnNldD17TWF0aC5yb3VuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2lyY3VtZmVyZW5jZSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2lyY3VtZmVyZW5jZSAqIGNoYXJ0VmFsdWUuZ2V0KGNvbnRleHQuaXRlbXNbaW5kZXhdKS5kaXNwbGF5VmFsdWUpIC8gdG90YWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybT17YHJvdGF0ZSgke3NlZ21lbnRUb3RhbExlbmd0aChpbmRleCl9IDIwIDIwKWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC9zdmc+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpbXBsZS1kb251dC1jaGFydC1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIHtkaXNwbGF5VG90YWwgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cImxpbmVjaGFydC10b3RhbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt1bml0UG9zaXRpb24gPT09IFwiYmVmb3JlXCIgJiYgdW5pdCAmJiB1bml0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0b3RhbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dW5pdFBvc2l0aW9uID09PSBcImFmdGVyXCIgJiYgdW5pdCAmJiB1bml0fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9oMT5cbiAgICAgICAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPXtgbGluZWNoYXJ0LWxlZ2VuZGB9PlxuICAgICAgICAgICAgICAgICAgICAgICAge2NvbnRleHQuaXRlbXMubWFwKChpdGVtLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2l0ZW19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e2BsaW5lY2hhcnQtbGVnZW5kLWluZGV4LSR7aW5kZXh9YH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyPXsoKSA9PiBzaG93SGdobGlnaHRQYXJ0KGNvbnRhaW5lclJlZi5jdXJyZW50W2luZGV4XSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17KCkgPT4gaGlkZUhpZ2hsaWdodFBhcnQoY29udGFpbmVyUmVmLmN1cnJlbnRbaW5kZXhdKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYHZhcigtLWxpbmVjaGFydC1jb2xvci0ke1tpbmRleF19LCAke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnNbaW5kZXhdID8gY29sb3JzW2luZGV4XS52YWx1ZSA6IGNvbG9yQXJyYXlbaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57Y2hhcnROYW1lLmdldChjb250ZXh0Lml0ZW1zW2luZGV4XSkuZGlzcGxheVZhbHVlfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dW5pdFBvc2l0aW9uID09PSBcImJlZm9yZVwiICYmIHVuaXQgJiYgdW5pdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjaGFydFZhbHVlLmdldChjb250ZXh0Lml0ZW1zW2luZGV4XSkuZGlzcGxheVZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3VuaXRQb3NpdGlvbiA9PT0gXCJhZnRlclwiICYmIHVuaXQgJiYgdW5pdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJsaW5lY2hhcnQtdG9vbHRpcFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9e2VsZW1lbnQgPT4gKHRvb2x0aXBSZWYuY3VycmVudFtpbmRleF0gPSBlbGVtZW50KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e2NoYXJ0TmFtZS5nZXQoY29udGV4dC5pdGVtc1tpbmRleF0pLmRpc3BsYXlWYWx1ZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dW5pdFBvc2l0aW9uID09PSBcImJlZm9yZVwiICYmIHVuaXQgJiYgdW5pdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2hhcnRWYWx1ZS5nZXQoY29udGV4dC5pdGVtc1tpbmRleF0pLmRpc3BsYXlWYWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dW5pdFBvc2l0aW9uID09PSBcImFmdGVyXCIgJiYgdW5pdCAmJiB1bml0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJsaW5lY2hhcnQtd2lkZ2V0XCI+PC9kaXY+O1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJzdHlsZUluamVjdCIsImNzcyIsInJlZiIsImluc2VydEF0IiwiZG9jdW1lbnQiLCJoZWFkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwiZmlyc3RDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsIlNpbXBsZURvbnV0Q2hhcnQiLCJjb250ZXh0IiwiY2hhcnRWYWx1ZSIsImNvbG9ycyIsImN1c3RvbVNvcnRPcmRlciIsImNoYXJ0TmFtZSIsImRpc3BsYXlUb3RhbCIsInNvcnRBdHRyaWJ1dGUiLCJzb3J0T3JkZXIiLCJ1bml0IiwidW5pdFBvc2l0aW9uIiwiY2FuUmVuZGVyIiwic2V0Q2FuUmVuZGVyIiwidXNlU3RhdGUiLCJjb250YWluZXJSZWYiLCJ1c2VSZWYiLCJ0b29sdGlwUmVmIiwiY29sb3JBcnJheSIsInRvdGFsIiwic2V0VG90YWwiLCJzdHJva2VXaWR0aCIsImN1cnJlbnRJbmRleCIsInByZVNlZ21lbnRzVG90YWxMZW5ndGgiLCJzb3J0SW5zdHJzIiwic2V0VG9vbHRpcFBvc2l0aW9uIiwiZXZlbnQiLCJjdXJzb3JTaXplIiwieCIsInBhZ2VYIiwieSIsInBhZ2VZIiwiY3VycmVudCIsInNldFByb3BlcnR5Iiwic2hvd0hnaGxpZ2h0UGFydCIsImN1cnJlbnRDb250YWluZXIiLCJoaWRlSGlnaGxpZ2h0UGFydCIsInNob3dUb29sdGlwIiwiaW5kZXgiLCJjbGFzc0xpc3QiLCJhZGQiLCJhZGRFdmVudExpc3RlbmVyIiwiaGlkZVRvb2x0aXAiLCJyZW1vdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FsY1RvdGFsIiwidG90YWxzIiwiaXRlbXMiLCJtYXAiLCJpdGVtIiwicHVzaCIsIk51bWJlciIsImdldCIsImRpc3BsYXlWYWx1ZSIsInJlZHVjZSIsImEiLCJiIiwic2V0U29ydE9yZGVyIiwic29ydGFibGUiLCJpZCIsInVzZUVmZmVjdCIsInN0YXR1cyIsImxlbmd0aCIsInJhZGl1cyIsImNpcmN1bWZlcmVuY2UiLCJNYXRoIiwiUEkiLCJzdGFydEFuZ2xlIiwic2VnbWVudFRvdGFsTGVuZ3RoIiwidGhpc1RvdGFsIiwicm91bmQiLCJlbGVtZW50IiwidmFsdWUiLCJiYWNrZ3JvdW5kQ29sb3IiXSwibWFwcGluZ3MiOiI7O0VBQUEsU0FBU0EsV0FBVCxDQUFxQkMsR0FBckIsRUFBMEJDLEdBQTFCLEVBQStCO0VBQzdCLE1BQUtBLEdBQUcsS0FBSyxLQUFLLENBQWxCLEVBQXNCQSxHQUFHLEdBQUcsRUFBTjtFQUN0QixNQUFJQyxRQUFRLEdBQUdELEdBQUcsQ0FBQ0MsUUFBbkI7O0VBRUEsTUFBSSxDQUFDRixHQUFELElBQVEsT0FBT0csUUFBUCxLQUFvQixXQUFoQyxFQUE2QztFQUFFO0VBQVM7O0VBRXhELE1BQUlDLElBQUksR0FBR0QsUUFBUSxDQUFDQyxJQUFULElBQWlCRCxRQUFRLENBQUNFLG9CQUFULENBQThCLE1BQTlCLEVBQXNDLENBQXRDLENBQTVCO0VBQ0EsTUFBSUMsS0FBSyxHQUFHSCxRQUFRLENBQUNJLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBWjtFQUNBRCxFQUFBQSxLQUFLLENBQUNFLElBQU4sR0FBYSxVQUFiOztFQUVBLE1BQUlOLFFBQVEsS0FBSyxLQUFqQixFQUF3QjtFQUN0QixRQUFJRSxJQUFJLENBQUNLLFVBQVQsRUFBcUI7RUFDbkJMLE1BQUFBLElBQUksQ0FBQ00sWUFBTCxDQUFrQkosS0FBbEIsRUFBeUJGLElBQUksQ0FBQ0ssVUFBOUI7RUFDRCxLQUZELE1BRU87RUFDTEwsTUFBQUEsSUFBSSxDQUFDTyxXQUFMLENBQWlCTCxLQUFqQjtFQUNEO0VBQ0YsR0FORCxNQU1PO0VBQ0xGLElBQUFBLElBQUksQ0FBQ08sV0FBTCxDQUFpQkwsS0FBakI7RUFDRDs7RUFFRCxNQUFJQSxLQUFLLENBQUNNLFVBQVYsRUFBc0I7RUFDcEJOLElBQUFBLEtBQUssQ0FBQ00sVUFBTixDQUFpQkMsT0FBakIsR0FBMkJiLEdBQTNCO0VBQ0QsR0FGRCxNQUVPO0VBQ0xNLElBQUFBLEtBQUssQ0FBQ0ssV0FBTixDQUFrQlIsUUFBUSxDQUFDVyxjQUFULENBQXdCZCxHQUF4QixDQUFsQjtFQUNEO0VBQ0Y7Ozs7O0VDdEJjLFNBQVNlLGdCQUFULENBQTBCO0VBQ3JDQyxFQUFBQSxPQURxQztFQUVyQ0MsRUFBQUEsVUFGcUM7RUFHckNDLEVBQUFBLE1BSHFDO0VBSXJDQyxFQUFBQSxlQUpxQztFQUtyQ0MsRUFBQUEsU0FMcUM7RUFNckNDLEVBQUFBLFlBTnFDO0VBT3JDQyxFQUFBQSxhQVBxQztFQVFyQ0MsRUFBQUEsU0FScUM7RUFTckNDLEVBQUFBLElBVHFDO0VBVXJDQyxFQUFBQTtFQVZxQyxDQUExQixFQVdaO0VBQ0MsUUFBTSxDQUFDQyxTQUFELEVBQVlDLFlBQVosSUFBNEJDLGNBQVEsQ0FBQyxLQUFELENBQTFDO0VBQ0EsUUFBTUMsWUFBWSxHQUFHQyxZQUFNLENBQUMsRUFBRCxDQUEzQjtFQUNBLFFBQU1DLFVBQVUsR0FBR0QsWUFBTSxDQUFDLEVBQUQsQ0FBekI7RUFDQSxRQUFNRSxVQUFVLEdBQUcsQ0FBQyxTQUFELEVBQVksU0FBWixFQUF1QixTQUF2QixFQUFrQyxTQUFsQyxFQUE2QyxTQUE3QyxFQUF3RCxTQUF4RCxFQUFtRSxTQUFuRSxFQUE4RSxTQUE5RSxDQUFuQjtFQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CTixjQUFRLENBQUMsQ0FBRCxDQUFsQztFQUNBLFFBQU1PLFdBQVcsR0FBRyxDQUFwQjtFQUNBLE1BQUlDLFlBQVksR0FBRyxDQUFuQjtFQUNBLE1BQUlDLHNCQUFzQixHQUFHLENBQTdCO0VBQ0EsTUFBSUMsVUFBVSxHQUFHLEVBQWpCOztFQUVBLFdBQVNDLGtCQUFULENBQTRCQyxLQUE1QixFQUFtQztFQUMvQixVQUFNQyxVQUFVLEdBQUcsS0FBSyxDQUF4QjtFQUNBLFVBQU1DLENBQUMsR0FBR0YsS0FBSyxDQUFDRyxLQUFOLEdBQWNGLFVBQXhCO0VBQ0EsVUFBTUcsQ0FBQyxHQUFHSixLQUFLLENBQUNLLEtBQU4sR0FBY0osVUFBeEI7RUFDQVYsSUFBQUEsVUFBVSxDQUFDZSxPQUFYLENBQW1CVixZQUFuQixFQUFpQzlCLEtBQWpDLENBQXVDeUMsV0FBdkMsQ0FBbUQsS0FBbkQsRUFBMkQsR0FBRUwsQ0FBRSxJQUEvRDtFQUNBWCxJQUFBQSxVQUFVLENBQUNlLE9BQVgsQ0FBbUJWLFlBQW5CLEVBQWlDOUIsS0FBakMsQ0FBdUN5QyxXQUF2QyxDQUFtRCxLQUFuRCxFQUEyRCxHQUFFSCxDQUFFLElBQS9EO0VBQ0g7O0VBRUQsV0FBU0ksZ0JBQVQsQ0FBMEJDLGdCQUExQixFQUE0QztFQUN4Q0EsSUFBQUEsZ0JBQWdCLENBQUMzQyxLQUFqQixDQUF1QjZCLFdBQXZCLEdBQXFDQSxXQUFXLEdBQUcsQ0FBbkQ7RUFDSDs7RUFFRCxXQUFTZSxpQkFBVCxDQUEyQkQsZ0JBQTNCLEVBQTZDO0VBQ3pDQSxJQUFBQSxnQkFBZ0IsQ0FBQzNDLEtBQWpCLENBQXVCNkIsV0FBdkIsR0FBcUMsSUFBckM7RUFDSDs7RUFFRCxXQUFTZ0IsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEJILGdCQUE1QixFQUE4QztFQUMxQ2xCLElBQUFBLFVBQVUsQ0FBQ2UsT0FBWCxDQUFtQk0sS0FBbkIsRUFBMEJDLFNBQTFCLENBQW9DQyxHQUFwQyxDQUF3QyxjQUF4QztFQUNBbEIsSUFBQUEsWUFBWSxHQUFHZ0IsS0FBZjtFQUNBSixJQUFBQSxnQkFBZ0IsQ0FBQ0MsZ0JBQUQsQ0FBaEI7RUFDQTlDLElBQUFBLFFBQVEsQ0FBQ29ELGdCQUFULENBQTBCLFdBQTFCLEVBQXVDaEIsa0JBQXZDO0VBQ0g7O0VBRUQsV0FBU2lCLFdBQVQsQ0FBcUJKLEtBQXJCLEVBQTRCSCxnQkFBNUIsRUFBOEM7RUFDMUNsQixJQUFBQSxVQUFVLENBQUNlLE9BQVgsQ0FBbUJNLEtBQW5CLEVBQTBCQyxTQUExQixDQUFvQ0ksTUFBcEMsQ0FBMkMsY0FBM0M7RUFDQXJCLElBQUFBLFlBQVksR0FBRyxDQUFmO0VBQ0FjLElBQUFBLGlCQUFpQixDQUFDRCxnQkFBRCxDQUFqQjtFQUNBOUMsSUFBQUEsUUFBUSxDQUFDdUQsbUJBQVQsQ0FBNkIsV0FBN0IsRUFBMENuQixrQkFBMUM7RUFDSDs7RUFFRCxXQUFTb0IsU0FBVCxHQUFxQjtFQUNqQixVQUFNQyxNQUFNLEdBQUcsRUFBZjtFQUNBNUMsSUFBQUEsT0FBTyxDQUFDNkMsS0FBUixDQUFjQyxHQUFkLENBQWtCLENBQUNDLElBQUQsRUFBT1gsS0FBUCxLQUFpQlEsTUFBTSxDQUFDSSxJQUFQLENBQVlDLE1BQU0sQ0FBQ2hELFVBQVUsQ0FBQ2lELEdBQVgsQ0FBZWxELE9BQU8sQ0FBQzZDLEtBQVIsQ0FBY1QsS0FBZCxDQUFmLEVBQXFDZSxZQUF0QyxDQUFsQixDQUFuQztFQUNBakMsSUFBQUEsUUFBUSxDQUFDMEIsTUFBTSxDQUFDUSxNQUFQLENBQWMsQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLEtBQVVELENBQUMsR0FBR0MsQ0FBNUIsRUFBK0IsQ0FBL0IsQ0FBRCxDQUFSO0VBQ0g7O0VBRUQsV0FBU0MsWUFBVCxHQUF3QjtFQUNwQixRQUFJLENBQUNwRCxlQUFELElBQW9CRyxhQUFhLEtBQUssV0FBdEMsSUFBcURGLFNBQVMsQ0FBQ29ELFFBQW5FLEVBQTZFO0VBQ3pFbEMsTUFBQUEsVUFBVSxHQUFHLENBQUMsQ0FBQ2xCLFNBQVMsQ0FBQ3FELEVBQVgsRUFBZWxELFNBQWYsQ0FBRCxDQUFiO0VBQ0gsS0FGRCxNQUVPLElBQUksQ0FBQ0osZUFBRCxJQUFvQkcsYUFBYSxLQUFLLFlBQXRDLElBQXNETCxVQUFVLENBQUN1RCxRQUFyRSxFQUErRTtFQUNsRmxDLE1BQUFBLFVBQVUsR0FBRyxDQUFDLENBQUNyQixVQUFVLENBQUN3RCxFQUFaLEVBQWdCbEQsU0FBaEIsQ0FBRCxDQUFiO0VBQ0gsS0FGTSxNQUVBLElBQUlKLGVBQWUsSUFBSUEsZUFBZSxDQUFDcUQsUUFBdkMsRUFBaUQ7RUFDcERsQyxNQUFBQSxVQUFVLEdBQUcsQ0FBQyxDQUFDbkIsZUFBZSxDQUFDc0QsRUFBakIsRUFBcUJsRCxTQUFyQixDQUFELENBQWI7RUFDSDs7RUFDRFAsSUFBQUEsT0FBTyxDQUFDdUQsWUFBUixDQUFxQmpDLFVBQXJCO0VBQ0g7O0VBRURvQyxFQUFBQSxlQUFTLENBQUMsTUFBTTtFQUNaLFFBQUkxRCxPQUFPLElBQUlBLE9BQU8sQ0FBQzJELE1BQVIsS0FBbUIsV0FBOUIsSUFBNkMzRCxPQUFPLENBQUM2QyxLQUFSLENBQWNlLE1BQWQsR0FBdUIsQ0FBeEUsRUFBMkU7RUFDdkVMLE1BQUFBLFlBQVk7RUFDWlosTUFBQUEsU0FBUztFQUNUaEMsTUFBQUEsWUFBWSxDQUFDLElBQUQsQ0FBWjtFQUNIO0VBQ0osR0FOUSxFQU1OLENBQUNYLE9BQUQsRUFBVUUsTUFBVixDQU5NLENBQVQ7O0VBUUEsTUFBSVEsU0FBSixFQUFlO0VBQ1gsVUFBTW1ELE1BQU0sR0FBRyxpQkFBZjtFQUNBLFVBQU1DLGFBQWEsR0FBRyxJQUFJQyxJQUFJLENBQUNDLEVBQVQsR0FBY0gsTUFBcEM7RUFDQSxVQUFNSSxVQUFVLEdBQUcsQ0FBQyxFQUFwQjs7RUFFQSxhQUFTQyxrQkFBVCxDQUE0QjlCLEtBQTVCLEVBQW1DO0VBQy9CLFlBQU0rQixTQUFTLEdBQUk5QyxzQkFBc0IsR0FBRyxHQUExQixHQUFpQ0osS0FBakMsR0FBeUNnRCxVQUEzRDtFQUNBNUMsTUFBQUEsc0JBQXNCLElBQUk0QixNQUFNLENBQUNjLElBQUksQ0FBQ0ssS0FBTCxDQUFXbkUsVUFBVSxDQUFDaUQsR0FBWCxDQUFlbEQsT0FBTyxDQUFDNkMsS0FBUixDQUFjVCxLQUFkLENBQWYsRUFBcUNlLFlBQWhELENBQUQsQ0FBaEM7RUFDQSxhQUFPZ0IsU0FBUDtFQUNIOztFQUVELFdBQ0k1RTtFQUFLLE1BQUEsU0FBUyxFQUFDO0VBQWYsT0FDSUE7RUFDSSxNQUFBLEtBQUssRUFBQyw0QkFEVjtFQUVJLE1BQUEsU0FBUyxFQUFDLE9BRmQ7RUFHSSxNQUFBLE9BQU8sRUFBQyxXQUhaO0VBSUksTUFBQSxtQkFBbUIsRUFBQztFQUp4QixPQU1LUyxPQUFPLENBQUM2QyxLQUFSLENBQWNDLEdBQWQsQ0FBa0IsQ0FBQ0MsSUFBRCxFQUFPWCxLQUFQLEtBQ2Y3QztFQUNJLE1BQUEsR0FBRyxFQUFFd0QsSUFEVDtFQUVJLE1BQUEsR0FBRyxFQUFFc0IsT0FBTyxJQUFLeEQsWUFBWSxDQUFDaUIsT0FBYixDQUFxQk0sS0FBckIsSUFBOEJpQyxPQUZuRDtFQUdJLE1BQUEsSUFBSSxFQUFHLDBCQUF5QmpDLEtBQU0sRUFIMUM7RUFJSSxNQUFBLFlBQVksRUFBRSxNQUFNRCxXQUFXLENBQUNDLEtBQUQsRUFBUXZCLFlBQVksQ0FBQ2lCLE9BQWIsQ0FBcUJNLEtBQXJCLENBQVIsQ0FKbkM7RUFLSSxNQUFBLFlBQVksRUFBRSxNQUFNSSxXQUFXLENBQUNKLEtBQUQsRUFBUXZCLFlBQVksQ0FBQ2lCLE9BQWIsQ0FBcUJNLEtBQXJCLENBQVIsQ0FMbkM7RUFNSSxNQUFBLEVBQUUsRUFBQyxJQU5QO0VBT0ksTUFBQSxFQUFFLEVBQUMsSUFQUDtFQVFJLE1BQUEsS0FBSyxFQUFDLGFBUlY7RUFTSSxNQUFBLENBQUMsRUFBRXlCLE1BVFA7RUFVSSxzQkFBYzFDLFdBVmxCO0VBV0ksTUFBQSxNQUFNLEVBQUcseUJBQXdCLENBQUNpQixLQUFELENBQVEsS0FDckNsQyxNQUFNLENBQUNrQyxLQUFELENBQU4sR0FBZ0JsQyxNQUFNLENBQUNrQyxLQUFELENBQU4sQ0FBY2tDLEtBQTlCLEdBQXNDdEQsVUFBVSxDQUFDb0IsS0FBRCxDQUNuRCxHQWJMO0VBY0ksTUFBQSxlQUFlLEVBQUUyQixJQUFJLENBQUNLLEtBQUwsQ0FBV04sYUFBWCxDQWRyQjtFQWVJLE1BQUEsZ0JBQWdCLEVBQUVDLElBQUksQ0FBQ0ssS0FBTCxDQUNkTixhQUFhLEdBQ1JBLGFBQWEsR0FBRzdELFVBQVUsQ0FBQ2lELEdBQVgsQ0FBZWxELE9BQU8sQ0FBQzZDLEtBQVIsQ0FBY1QsS0FBZCxDQUFmLEVBQXFDZSxZQUF0RCxHQUFzRWxDLEtBRjVELENBZnRCO0VBbUJJLE1BQUEsU0FBUyxFQUFHLFVBQVNpRCxrQkFBa0IsQ0FBQzlCLEtBQUQsQ0FBUSxTQW5CbkQ7RUFvQkksTUFBQSxJQUFJLEVBQUM7RUFwQlQsTUFESCxDQU5MLENBREosRUFpQ0k3QztFQUFLLE1BQUEsU0FBUyxFQUFDO0VBQWYsT0FDS2MsWUFBWSxJQUNUZDtFQUFJLE1BQUEsU0FBUyxFQUFDO0VBQWQsT0FDS2tCLFlBQVksS0FBSyxRQUFqQixJQUE2QkQsSUFBN0IsSUFBcUNBLElBRDFDLEVBRUtTLEtBRkwsRUFHS1IsWUFBWSxLQUFLLE9BQWpCLElBQTRCRCxJQUE1QixJQUFvQ0EsSUFIekMsQ0FGUixFQVNJakI7RUFBSSxNQUFBLFNBQVMsRUFBRztFQUFoQixPQUNLUyxPQUFPLENBQUM2QyxLQUFSLENBQWNDLEdBQWQsQ0FBa0IsQ0FBQ0MsSUFBRCxFQUFPWCxLQUFQLEtBQ2Y3QztFQUNJLE1BQUEsR0FBRyxFQUFFd0QsSUFEVDtFQUVJLE1BQUEsSUFBSSxFQUFHLDBCQUF5QlgsS0FBTSxFQUYxQztFQUdJLE1BQUEsWUFBWSxFQUFFLE1BQU1KLGdCQUFnQixDQUFDbkIsWUFBWSxDQUFDaUIsT0FBYixDQUFxQk0sS0FBckIsQ0FBRCxDQUh4QztFQUlJLE1BQUEsWUFBWSxFQUFFLE1BQU1GLGlCQUFpQixDQUFDckIsWUFBWSxDQUFDaUIsT0FBYixDQUFxQk0sS0FBckIsQ0FBRDtFQUp6QyxPQU1JN0M7RUFDSSxNQUFBLEtBQUssRUFBRTtFQUNIZ0YsUUFBQUEsZUFBZSxFQUFHLHlCQUF3QixDQUFDbkMsS0FBRCxDQUFRLEtBQzlDbEMsTUFBTSxDQUFDa0MsS0FBRCxDQUFOLEdBQWdCbEMsTUFBTSxDQUFDa0MsS0FBRCxDQUFOLENBQWNrQyxLQUE5QixHQUFzQ3RELFVBQVUsQ0FBQ29CLEtBQUQsQ0FDbkQ7RUFIRTtFQURYLE1BTkosRUFhSTdDLCtCQUFJYSxTQUFTLENBQUM4QyxHQUFWLENBQWNsRCxPQUFPLENBQUM2QyxLQUFSLENBQWNULEtBQWQsQ0FBZCxFQUFvQ2UsWUFBeEMsQ0FiSixFQWNJNUQsK0JBQ0trQixZQUFZLEtBQUssUUFBakIsSUFBNkJELElBQTdCLElBQXFDQSxJQUQxQyxFQUVLUCxVQUFVLENBQUNpRCxHQUFYLENBQWVsRCxPQUFPLENBQUM2QyxLQUFSLENBQWNULEtBQWQsQ0FBZixFQUFxQ2UsWUFGMUMsRUFHSzFDLFlBQVksS0FBSyxPQUFqQixJQUE0QkQsSUFBNUIsSUFBb0NBLElBSHpDLENBZEosRUFtQklqQjtFQUNJLE1BQUEsU0FBUyxFQUFDLG1CQURkO0VBRUksTUFBQSxHQUFHLEVBQUU4RSxPQUFPLElBQUt0RCxVQUFVLENBQUNlLE9BQVgsQ0FBbUJNLEtBQW5CLElBQTRCaUM7RUFGakQsT0FJSTlFLCtCQUFJYSxTQUFTLENBQUM4QyxHQUFWLENBQWNsRCxPQUFPLENBQUM2QyxLQUFSLENBQWNULEtBQWQsQ0FBZCxFQUFvQ2UsWUFBeEMsQ0FKSixFQUtJNUQsK0JBQ0trQixZQUFZLEtBQUssUUFBakIsSUFBNkJELElBQTdCLElBQXFDQSxJQUQxQyxFQUVLUCxVQUFVLENBQUNpRCxHQUFYLENBQWVsRCxPQUFPLENBQUM2QyxLQUFSLENBQWNULEtBQWQsQ0FBZixFQUFxQ2UsWUFGMUMsRUFHSzFDLFlBQVksS0FBSyxPQUFqQixJQUE0QkQsSUFBNUIsSUFBb0NBLElBSHpDLENBTEosQ0FuQkosQ0FESCxDQURMLENBVEosQ0FqQ0osQ0FESjtFQWlGSCxHQTVGRCxNQTRGTztFQUNILFdBQU9qQjtFQUFLLE1BQUEsU0FBUyxFQUFDO0VBQWYsTUFBUDtFQUNIO0VBQ0o7Ozs7Ozs7OyJ9
