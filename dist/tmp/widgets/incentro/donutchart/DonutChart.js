define(['react'], (function (react) { 'use strict';

  function styleInject(css, ref) {
    if (ref === void 0) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') {
      return;
    }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z = "svg {\n    align-items: center;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    width: 100%;\n}\n\n.donut {\n    transition: stroke-width 0.2s ease;\n    cursor: pointer;\n}\n\n.linechart-widget {\n    align-items: center;\n    display: flex;\n    margin-bottom: 24px;\n    position: relative;\n}\n\n.linechart-donut {\n    flex: 1;\n    margin-right: 16px;\n}\n\n.linechart-info {\n    position: relative;\n}\n\n.linechart-widget .linechart-legend {\n    margin-bottom: 30px;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n    width: max-content;\n}\n\n.linechart-widget .linechart-legend p:first-of-type {\n    flex: 1;\n    margin-right: 16px;\n}\n\n.linechart-widget .linechart-legend li {\n    align-items: center;\n    display: flex;\n    list-style: none;\n}\n\n.linechart-widget .linechart-legend li:hover {\n    cursor: pointer;\n}\n\n.linechart-widget .linechart-legend p {\n    margin: 0;\n}\n\n.linechart-widget .linechart-legend span {\n    border-radius: 50px;\n    display: block;\n    height: 16px;\n    margin-right: 8px;\n    width: 16px;\n}\n\n.linechart-widget .linechart-chart {\n    align-self: center;\n    display: flex;\n    grid-template-columns: repeat(100, 1fr);\n    grid-auto-flow: column;\n    margin: 0;\n    padding: 0;\n}\n\n.linechart-widget .linechart-chart li {\n    list-style: none;\n    min-height: 20px;\n    position: relative;\n}\n\n.linechart-widget .linechart-chart.linechart-chart--rounded li:first-of-type {\n    border-top-left-radius: 50px;\n    border-bottom-left-radius: 50px;\n}\n\n.linechart-widget .linechart-chart.linechart-chart--rounded li:last-of-type {\n    border-top-right-radius: 50px;\n    border-bottom-right-radius: 50px;\n}\n\n.linechart-widget .linechart-chart li:hover {\n    cursor: pointer;\n}\n\n.linechart-widget .linechart-legend li .linechart-tooltip {\n    background-color: white;\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.3);\n    border-radius: 4px;\n    display: flex;\n    left: var(--x);\n    opacity: 0;\n    padding: 4px 8px;\n    position: fixed;\n    pointer-events: none;\n    transition: opacity 0.2s ease, transform 0.2s ease;\n    top: var(--y);\n    will-change: opacity;\n    width: max-content;\n    z-index: 1;\n}\n\n.linechart-widget .linechart-legend li .linechart-tooltip.show-tooltip {\n    opacity: 1;\n    transform: translateY(-60%);\n}\n\n.linechart-widget .linechart-chart li .linechart-tooltip p {\n    margin: 0;\n    padding: 4px 8px;\n}\n\n.linechart-widget .linechart-meter {\n    border-top: solid 1px black;\n    display: flex;\n    justify-content: space-between;\n}\n\n.linechart-widget .linechart-meter .item {\n    background-color: black;\n    height: 9px;\n    width: 1px;\n}\n\n.linechart-widget .linechart-indicators {\n    display: flex;\n}\n\n.linechart-widget .linechart-indicator {\n    flex: 1;\n}\n\n.linechart-widget .linechart-indicator:nth-child(2) {\n    text-align: center;\n}\n\n.linechart-widget .linechart-indicator:last-of-type {\n    text-align: right;\n}\n\n.linechart-widget .linechart-tooltip {\n    position: absolute;\n}\n\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRvbnV0Q2hhcnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksbUJBQW1CO0lBQ25CLFlBQVk7SUFDWixhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGtDQUFrQztJQUNsQyxlQUFlO0FBQ25COztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksT0FBTztJQUNQLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixVQUFVO0lBQ1YsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxPQUFPO0lBQ1Asa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLGFBQWE7SUFDYixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksU0FBUztBQUNiOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLGNBQWM7SUFDZCxZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2IsdUNBQXVDO0lBQ3ZDLHNCQUFzQjtJQUN0QixTQUFTO0lBQ1QsVUFBVTtBQUNkOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSw0QkFBNEI7SUFDNUIsK0JBQStCO0FBQ25DOztBQUVBO0lBQ0ksNkJBQTZCO0lBQzdCLGdDQUFnQztBQUNwQzs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIsMENBQTBDO0lBQzFDLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2IsY0FBYztJQUNkLFVBQVU7SUFDVixnQkFBZ0I7SUFDaEIsZUFBZTtJQUNmLG9CQUFvQjtJQUNwQixrREFBa0Q7SUFDbEQsYUFBYTtJQUNiLG9CQUFvQjtJQUNwQixrQkFBa0I7SUFDbEIsVUFBVTtBQUNkOztBQUVBO0lBQ0ksVUFBVTtJQUNWLDJCQUEyQjtBQUMvQjs7QUFFQTtJQUNJLFNBQVM7SUFDVCxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSwyQkFBMkI7SUFDM0IsYUFBYTtJQUNiLDhCQUE4QjtBQUNsQzs7QUFFQTtJQUNJLHVCQUF1QjtJQUN2QixXQUFXO0lBQ1gsVUFBVTtBQUNkOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLE9BQU87QUFDWDs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0QiIsImZpbGUiOiJEb251dENoYXJ0LmNzcyIsInNvdXJjZXNDb250ZW50IjpbInN2ZyB7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuLmRvbnV0IHtcbiAgICB0cmFuc2l0aW9uOiBzdHJva2Utd2lkdGggMC4ycyBlYXNlO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmxpbmVjaGFydC13aWRnZXQge1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBtYXJnaW4tYm90dG9tOiAyNHB4O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLmxpbmVjaGFydC1kb251dCB7XG4gICAgZmxleDogMTtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG59XG5cbi5saW5lY2hhcnQtaW5mbyB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4ubGluZWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWxlZ2VuZCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB3aWR0aDogbWF4LWNvbnRlbnQ7XG59XG5cbi5saW5lY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtbGVnZW5kIHA6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgZmxleDogMTtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG59XG5cbi5saW5lY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtbGVnZW5kIGxpIHtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbn1cblxuLmxpbmVjaGFydC13aWRnZXQgLmxpbmVjaGFydC1sZWdlbmQgbGk6aG92ZXIge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmxpbmVjaGFydC13aWRnZXQgLmxpbmVjaGFydC1sZWdlbmQgcCB7XG4gICAgbWFyZ2luOiAwO1xufVxuXG4ubGluZWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWxlZ2VuZCBzcGFuIHtcbiAgICBib3JkZXItcmFkaXVzOiA1MHB4O1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGhlaWdodDogMTZweDtcbiAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICB3aWR0aDogMTZweDtcbn1cblxuLmxpbmVjaGFydC13aWRnZXQgLmxpbmVjaGFydC1jaGFydCB7XG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAwLCAxZnIpO1xuICAgIGdyaWQtYXV0by1mbG93OiBjb2x1bW47XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG59XG5cbi5saW5lY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtY2hhcnQgbGkge1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgbWluLWhlaWdodDogMjBweDtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi5saW5lY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtY2hhcnQubGluZWNoYXJ0LWNoYXJ0LS1yb3VuZGVkIGxpOmZpcnN0LW9mLXR5cGUge1xuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDUwcHg7XG4gICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNTBweDtcbn1cblxuLmxpbmVjaGFydC13aWRnZXQgLmxpbmVjaGFydC1jaGFydC5saW5lY2hhcnQtY2hhcnQtLXJvdW5kZWQgbGk6bGFzdC1vZi10eXBlIHtcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNTBweDtcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNTBweDtcbn1cblxuLmxpbmVjaGFydC13aWRnZXQgLmxpbmVjaGFydC1jaGFydCBsaTpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4ubGluZWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWxlZ2VuZCBsaSAubGluZWNoYXJ0LXRvb2x0aXAge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGJveC1zaGFkb3c6IDAgMnB4IDJweCAwIHJnYmEoMCwgMCwgMCwgMC4zKTtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBsZWZ0OiB2YXIoLS14KTtcbiAgICBvcGFjaXR5OiAwO1xuICAgIHBhZGRpbmc6IDRweCA4cHg7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyBlYXNlLCB0cmFuc2Zvcm0gMC4ycyBlYXNlO1xuICAgIHRvcDogdmFyKC0teSk7XG4gICAgd2lsbC1jaGFuZ2U6IG9wYWNpdHk7XG4gICAgd2lkdGg6IG1heC1jb250ZW50O1xuICAgIHotaW5kZXg6IDE7XG59XG5cbi5saW5lY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtbGVnZW5kIGxpIC5saW5lY2hhcnQtdG9vbHRpcC5zaG93LXRvb2x0aXAge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC02MCUpO1xufVxuXG4ubGluZWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWNoYXJ0IGxpIC5saW5lY2hhcnQtdG9vbHRpcCBwIHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogNHB4IDhweDtcbn1cblxuLmxpbmVjaGFydC13aWRnZXQgLmxpbmVjaGFydC1tZXRlciB7XG4gICAgYm9yZGVyLXRvcDogc29saWQgMXB4IGJsYWNrO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufVxuXG4ubGluZWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LW1ldGVyIC5pdGVtIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcbiAgICBoZWlnaHQ6IDlweDtcbiAgICB3aWR0aDogMXB4O1xufVxuXG4ubGluZWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWluZGljYXRvcnMge1xuICAgIGRpc3BsYXk6IGZsZXg7XG59XG5cbi5saW5lY2hhcnQtd2lkZ2V0IC5saW5lY2hhcnQtaW5kaWNhdG9yIHtcbiAgICBmbGV4OiAxO1xufVxuXG4ubGluZWNoYXJ0LXdpZGdldCAubGluZWNoYXJ0LWluZGljYXRvcjpudGgtY2hpbGQoMikge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLmxpbmVjaGFydC13aWRnZXQgLmxpbmVjaGFydC1pbmRpY2F0b3I6bGFzdC1vZi10eXBlIHtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbn1cblxuLmxpbmVjaGFydC13aWRnZXQgLmxpbmVjaGFydC10b29sdGlwIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG4iXX0= */";
  styleInject(css_248z);

  function DonutChart({
    context,
    chartValue,
    colors,
    customSortOrder,
    chartName,
    displayTotal,
    sortAttribute,
    sortOrder,
    unit,
    unitPosition
  }) {
    const [canRender, setCanRender] = react.useState(false);
    const containerRef = react.useRef([]);
    const tooltipRef = react.useRef([]);
    const colorArray = ["#003f5c", "#2f4b7c", "#665191", "#a05195", "#d45087", "#f95d6a", "#ff7c43", "#ffa600"];
    const [total, setTotal] = react.useState(0);
    const strokeWidth = 4;
    let currentIndex = 0;
    let preSegmentsTotalLength = 0;
    let sortInstrs = [];

    function setTooltipPosition(event) {
      const cursorSize = 32 / 2;
      const x = event.pageX + cursorSize;
      const y = event.pageY - cursorSize;
      tooltipRef.current[currentIndex].style.setProperty("--x", `${x}px`);
      tooltipRef.current[currentIndex].style.setProperty("--y", `${y}px`);
    }

    function showHghlightPart(currentContainer) {
      currentContainer.style.strokeWidth = strokeWidth + 2;
    }

    function hideHighlightPart(currentContainer) {
      currentContainer.style.strokeWidth = null;
    }

    function showTooltip(index, currentContainer) {
      tooltipRef.current[index].classList.add("show-tooltip");
      currentIndex = index;
      showHghlightPart(currentContainer);
      document.addEventListener("mousemove", setTooltipPosition);
    }

    function hideTooltip(index, currentContainer) {
      tooltipRef.current[index].classList.remove("show-tooltip");
      currentIndex = 0;
      hideHighlightPart(currentContainer);
      document.removeEventListener("mousemove", setTooltipPosition);
    }

    function calcTotal() {
      const totals = [];
      context.items.map((item, index) => totals.push(Number(chartValue.get(context.items[index]).displayValue)));
      setTotal(totals.reduce((a, b) => a + b, 0));
    }

    function setSortOrder() {
      if (!customSortOrder && sortAttribute === "chartName" && chartName.sortable) {
        sortInstrs = [[chartName.id, sortOrder]];
      } else if (!customSortOrder && sortAttribute === "chartValue" && chartValue.sortable) {
        sortInstrs = [[chartValue.id, sortOrder]];
      } else if (customSortOrder && customSortOrder.sortable) {
        sortInstrs = [[customSortOrder.id, sortOrder]];
      }

      context.setSortOrder(sortInstrs);
    }

    react.useEffect(() => {
      if (context && context.status === "available" && context.items.length > 0) {
        setSortOrder();
        calcTotal();
        setCanRender(true);
      }
    }, [context, colors]);

    if (canRender) {
      const radius = 15.91549430918952;
      const circumference = 2 * Math.PI * radius;
      const startAngle = -90;

      function segmentTotalLength(index) {
        const thisTotal = preSegmentsTotalLength * 360 / total + startAngle;
        preSegmentsTotalLength += Number(Math.round(chartValue.get(context.items[index]).displayValue));
        return thisTotal;
      }

      return react.createElement("div", {
        className: "linechart-widget"
      }, react.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        className: "linechart-donut",
        viewBox: "0 0 40 40",
        preserveAspectRatio: "xMinYMin meet"
      }, context.items.map((item, index) => react.createElement("circle", {
        key: item,
        ref: element => containerRef.current[index] = element,
        name: `donutchart-index-${index}`,
        onMouseEnter: () => showTooltip(index, containerRef.current[index]),
        onMouseLeave: () => hideTooltip(index, containerRef.current[index]),
        cx: "20",
        cy: "20",
        class: "donut",
        r: radius,
        "stroke-width": strokeWidth,
        stroke: `var(--linechart-color-${[index]}, ${colors[index] ? colors[index].value : colorArray[index]})`,
        strokeDasharray: Math.round(circumference),
        strokeDashoffset: Math.round(circumference - circumference * chartValue.get(context.items[index]).displayValue / total),
        transform: `rotate(${segmentTotalLength(index)} 20 20)`,
        fill: "none"
      }))), react.createElement("div", {
        className: "linechart-info"
      }, displayTotal && react.createElement("h1", {
        className: "linechart-total"
      }, unitPosition === "before" && unit && unit, total, unitPosition === "after" && unit && unit), react.createElement("ul", {
        className: `linechart-legend`
      }, context.items.map((item, index) => react.createElement("li", {
        key: item,
        name: `linechart-legend-index-${index}`,
        onMouseEnter: () => showHghlightPart(containerRef.current[index]),
        onMouseLeave: () => hideHighlightPart(containerRef.current[index])
      }, react.createElement("span", {
        style: {
          backgroundColor: `var(--linechart-color-${[index]}, ${colors[index] ? colors[index].value : colorArray[index]})`
        }
      }), react.createElement("p", null, chartName.get(context.items[index]).displayValue), react.createElement("p", null, unitPosition === "before" && unit && unit, chartValue.get(context.items[index]).displayValue, unitPosition === "after" && unit && unit), react.createElement("div", {
        className: "linechart-tooltip",
        ref: element => tooltipRef.current[index] = element
      }, react.createElement("p", null, chartName.get(context.items[index]).displayValue), react.createElement("p", null, unitPosition === "before" && unit && unit, chartValue.get(context.items[index]).displayValue, unitPosition === "after" && unit && unit)))))));
    } else {
      return react.createElement("div", {
        className: "linechart-widget"
      });
    }
  }

  return DonutChart;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9udXRDaGFydC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWluamVjdC9kaXN0L3N0eWxlLWluamVjdC5lcy5qcyIsIi4uLy4uLy4uLy4uLy4uL3NyYy9Eb251dENoYXJ0LmpzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzdHlsZUluamVjdChjc3MsIHJlZikge1xuICBpZiAoIHJlZiA9PT0gdm9pZCAwICkgcmVmID0ge307XG4gIHZhciBpbnNlcnRBdCA9IHJlZi5pbnNlcnRBdDtcblxuICBpZiAoIWNzcyB8fCB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybjsgfVxuXG4gIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcblxuICBpZiAoaW5zZXJ0QXQgPT09ICd0b3AnKSB7XG4gICAgaWYgKGhlYWQuZmlyc3RDaGlsZCkge1xuICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGUsIGhlYWQuZmlyc3RDaGlsZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlSW5qZWN0O1xuIiwiaW1wb3J0IFwiLi91aS9Eb251dENoYXJ0LmNzc1wiO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERvbnV0Q2hhcnQoe1xuICAgIGNvbnRleHQsXG4gICAgY2hhcnRWYWx1ZSxcbiAgICBjb2xvcnMsXG4gICAgY3VzdG9tU29ydE9yZGVyLFxuICAgIGNoYXJ0TmFtZSxcbiAgICBkaXNwbGF5VG90YWwsXG4gICAgc29ydEF0dHJpYnV0ZSxcbiAgICBzb3J0T3JkZXIsXG4gICAgdW5pdCxcbiAgICB1bml0UG9zaXRpb25cbn0pIHtcbiAgICBjb25zdCBbY2FuUmVuZGVyLCBzZXRDYW5SZW5kZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGNvbnRhaW5lclJlZiA9IHVzZVJlZihbXSk7XG4gICAgY29uc3QgdG9vbHRpcFJlZiA9IHVzZVJlZihbXSk7XG4gICAgY29uc3QgY29sb3JBcnJheSA9IFtcIiMwMDNmNWNcIiwgXCIjMmY0YjdjXCIsIFwiIzY2NTE5MVwiLCBcIiNhMDUxOTVcIiwgXCIjZDQ1MDg3XCIsIFwiI2Y5NWQ2YVwiLCBcIiNmZjdjNDNcIiwgXCIjZmZhNjAwXCJdO1xuICAgIGNvbnN0IFt0b3RhbCwgc2V0VG90YWxdID0gdXNlU3RhdGUoMCk7XG4gICAgY29uc3Qgc3Ryb2tlV2lkdGggPSA0O1xuICAgIGxldCBjdXJyZW50SW5kZXggPSAwO1xuICAgIGxldCBwcmVTZWdtZW50c1RvdGFsTGVuZ3RoID0gMDtcbiAgICBsZXQgc29ydEluc3RycyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gc2V0VG9vbHRpcFBvc2l0aW9uKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGN1cnNvclNpemUgPSAzMiAvIDI7XG4gICAgICAgIGNvbnN0IHggPSBldmVudC5wYWdlWCArIGN1cnNvclNpemU7XG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5wYWdlWSAtIGN1cnNvclNpemU7XG4gICAgICAgIHRvb2x0aXBSZWYuY3VycmVudFtjdXJyZW50SW5kZXhdLnN0eWxlLnNldFByb3BlcnR5KFwiLS14XCIsIGAke3h9cHhgKTtcbiAgICAgICAgdG9vbHRpcFJlZi5jdXJyZW50W2N1cnJlbnRJbmRleF0uc3R5bGUuc2V0UHJvcGVydHkoXCItLXlcIiwgYCR7eX1weGApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3dIZ2hsaWdodFBhcnQoY3VycmVudENvbnRhaW5lcikge1xuICAgICAgICBjdXJyZW50Q29udGFpbmVyLnN0eWxlLnN0cm9rZVdpZHRoID0gc3Ryb2tlV2lkdGggKyAyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhpZGVIaWdobGlnaHRQYXJ0KGN1cnJlbnRDb250YWluZXIpIHtcbiAgICAgICAgY3VycmVudENvbnRhaW5lci5zdHlsZS5zdHJva2VXaWR0aCA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvd1Rvb2x0aXAoaW5kZXgsIGN1cnJlbnRDb250YWluZXIpIHtcbiAgICAgICAgdG9vbHRpcFJlZi5jdXJyZW50W2luZGV4XS5jbGFzc0xpc3QuYWRkKFwic2hvdy10b29sdGlwXCIpO1xuICAgICAgICBjdXJyZW50SW5kZXggPSBpbmRleDtcbiAgICAgICAgc2hvd0hnaGxpZ2h0UGFydChjdXJyZW50Q29udGFpbmVyKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBzZXRUb29sdGlwUG9zaXRpb24pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhpZGVUb29sdGlwKGluZGV4LCBjdXJyZW50Q29udGFpbmVyKSB7XG4gICAgICAgIHRvb2x0aXBSZWYuY3VycmVudFtpbmRleF0uY2xhc3NMaXN0LnJlbW92ZShcInNob3ctdG9vbHRpcFwiKTtcbiAgICAgICAgY3VycmVudEluZGV4ID0gMDtcbiAgICAgICAgaGlkZUhpZ2hsaWdodFBhcnQoY3VycmVudENvbnRhaW5lcik7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgc2V0VG9vbHRpcFBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxjVG90YWwoKSB7XG4gICAgICAgIGNvbnN0IHRvdGFscyA9IFtdO1xuICAgICAgICBjb250ZXh0Lml0ZW1zLm1hcCgoaXRlbSwgaW5kZXgpID0+IHRvdGFscy5wdXNoKE51bWJlcihjaGFydFZhbHVlLmdldChjb250ZXh0Lml0ZW1zW2luZGV4XSkuZGlzcGxheVZhbHVlKSkpO1xuICAgICAgICBzZXRUb3RhbCh0b3RhbHMucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFNvcnRPcmRlcigpIHtcbiAgICAgICAgaWYgKCFjdXN0b21Tb3J0T3JkZXIgJiYgc29ydEF0dHJpYnV0ZSA9PT0gXCJjaGFydE5hbWVcIiAmJiBjaGFydE5hbWUuc29ydGFibGUpIHtcbiAgICAgICAgICAgIHNvcnRJbnN0cnMgPSBbW2NoYXJ0TmFtZS5pZCwgc29ydE9yZGVyXV07XG4gICAgICAgIH0gZWxzZSBpZiAoIWN1c3RvbVNvcnRPcmRlciAmJiBzb3J0QXR0cmlidXRlID09PSBcImNoYXJ0VmFsdWVcIiAmJiBjaGFydFZhbHVlLnNvcnRhYmxlKSB7XG4gICAgICAgICAgICBzb3J0SW5zdHJzID0gW1tjaGFydFZhbHVlLmlkLCBzb3J0T3JkZXJdXTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXN0b21Tb3J0T3JkZXIgJiYgY3VzdG9tU29ydE9yZGVyLnNvcnRhYmxlKSB7XG4gICAgICAgICAgICBzb3J0SW5zdHJzID0gW1tjdXN0b21Tb3J0T3JkZXIuaWQsIHNvcnRPcmRlcl1dO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuc2V0U29ydE9yZGVyKHNvcnRJbnN0cnMpO1xuICAgIH1cblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuc3RhdHVzID09PSBcImF2YWlsYWJsZVwiICYmIGNvbnRleHQuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2V0U29ydE9yZGVyKCk7XG4gICAgICAgICAgICBjYWxjVG90YWwoKTtcbiAgICAgICAgICAgIHNldENhblJlbmRlcih0cnVlKTtcbiAgICAgICAgfVxuICAgIH0sIFtjb250ZXh0LCBjb2xvcnNdKTtcblxuICAgIGlmIChjYW5SZW5kZXIpIHtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gMTUuOTE1NDk0MzA5MTg5NTI7XG4gICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSAyICogTWF0aC5QSSAqIHJhZGl1cztcbiAgICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IC05MDtcblxuICAgICAgICBmdW5jdGlvbiBzZWdtZW50VG90YWxMZW5ndGgoaW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHRoaXNUb3RhbCA9IChwcmVTZWdtZW50c1RvdGFsTGVuZ3RoICogMzYwKSAvIHRvdGFsICsgc3RhcnRBbmdsZTtcbiAgICAgICAgICAgIHByZVNlZ21lbnRzVG90YWxMZW5ndGggKz0gTnVtYmVyKE1hdGgucm91bmQoY2hhcnRWYWx1ZS5nZXQoY29udGV4dC5pdGVtc1tpbmRleF0pLmRpc3BsYXlWYWx1ZSkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNUb3RhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpbmVjaGFydC13aWRnZXRcIj5cbiAgICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJsaW5lY2hhcnQtZG9udXRcIlxuICAgICAgICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDQwIDQwXCJcbiAgICAgICAgICAgICAgICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbz1cInhNaW5ZTWluIG1lZXRcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2NvbnRleHQuaXRlbXMubWFwKChpdGVtLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17aXRlbX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9e2VsZW1lbnQgPT4gKGNvbnRhaW5lclJlZi5jdXJyZW50W2luZGV4XSA9IGVsZW1lbnQpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e2Bkb251dGNoYXJ0LWluZGV4LSR7aW5kZXh9YH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk1vdXNlRW50ZXI9eygpID0+IHNob3dUb29sdGlwKGluZGV4LCBjb250YWluZXJSZWYuY3VycmVudFtpbmRleF0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17KCkgPT4gaGlkZVRvb2x0aXAoaW5kZXgsIGNvbnRhaW5lclJlZi5jdXJyZW50W2luZGV4XSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3g9XCIyMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3k9XCIyMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJkb251dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcj17cmFkaXVzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZS13aWR0aD17c3Ryb2tlV2lkdGh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlPXtgdmFyKC0tbGluZWNoYXJ0LWNvbG9yLSR7W2luZGV4XX0sICR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yc1tpbmRleF0gPyBjb2xvcnNbaW5kZXhdLnZhbHVlIDogY29sb3JBcnJheVtpbmRleF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlRGFzaGFycmF5PXtNYXRoLnJvdW5kKGNpcmN1bWZlcmVuY2UpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZURhc2hvZmZzZXQ9e01hdGgucm91bmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpcmN1bWZlcmVuY2UgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNpcmN1bWZlcmVuY2UgKiBjaGFydFZhbHVlLmdldChjb250ZXh0Lml0ZW1zW2luZGV4XSkuZGlzcGxheVZhbHVlKSAvIHRvdGFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm09e2Byb3RhdGUoJHtzZWdtZW50VG90YWxMZW5ndGgoaW5kZXgpfSAyMCAyMClgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvc3ZnPlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsaW5lY2hhcnQtaW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICB7ZGlzcGxheVRvdGFsICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJsaW5lY2hhcnQtdG90YWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dW5pdFBvc2l0aW9uID09PSBcImJlZm9yZVwiICYmIHVuaXQgJiYgdW5pdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dG90YWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3VuaXRQb3NpdGlvbiA9PT0gXCJhZnRlclwiICYmIHVuaXQgJiYgdW5pdH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT17YGxpbmVjaGFydC1sZWdlbmRgfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtjb250ZXh0Lml0ZW1zLm1hcCgoaXRlbSwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpdGVtfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtgbGluZWNoYXJ0LWxlZ2VuZC1pbmRleC0ke2luZGV4fWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcj17KCkgPT4gc2hvd0hnaGxpZ2h0UGFydChjb250YWluZXJSZWYuY3VycmVudFtpbmRleF0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk1vdXNlTGVhdmU9eygpID0+IGhpZGVIaWdobGlnaHRQYXJ0KGNvbnRhaW5lclJlZi5jdXJyZW50W2luZGV4XSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGB2YXIoLS1saW5lY2hhcnQtY29sb3ItJHtbaW5kZXhdfSwgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzW2luZGV4XSA/IGNvbG9yc1tpbmRleF0udmFsdWUgOiBjb2xvckFycmF5W2luZGV4XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e2NoYXJ0TmFtZS5nZXQoY29udGV4dC5pdGVtc1tpbmRleF0pLmRpc3BsYXlWYWx1ZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3VuaXRQb3NpdGlvbiA9PT0gXCJiZWZvcmVcIiAmJiB1bml0ICYmIHVuaXR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2hhcnRWYWx1ZS5nZXQoY29udGV4dC5pdGVtc1tpbmRleF0pLmRpc3BsYXlWYWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt1bml0UG9zaXRpb24gPT09IFwiYWZ0ZXJcIiAmJiB1bml0ICYmIHVuaXR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibGluZWNoYXJ0LXRvb2x0aXBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXtlbGVtZW50ID0+ICh0b29sdGlwUmVmLmN1cnJlbnRbaW5kZXhdID0gZWxlbWVudCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPntjaGFydE5hbWUuZ2V0KGNvbnRleHQuaXRlbXNbaW5kZXhdKS5kaXNwbGF5VmFsdWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3VuaXRQb3NpdGlvbiA9PT0gXCJiZWZvcmVcIiAmJiB1bml0ICYmIHVuaXR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2NoYXJ0VmFsdWUuZ2V0KGNvbnRleHQuaXRlbXNbaW5kZXhdKS5kaXNwbGF5VmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3VuaXRQb3NpdGlvbiA9PT0gXCJhZnRlclwiICYmIHVuaXQgJiYgdW5pdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwibGluZWNoYXJ0LXdpZGdldFwiPjwvZGl2PjtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsic3R5bGVJbmplY3QiLCJjc3MiLCJyZWYiLCJpbnNlcnRBdCIsImRvY3VtZW50IiwiaGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsImZpcnN0Q2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJEb251dENoYXJ0IiwiY29udGV4dCIsImNoYXJ0VmFsdWUiLCJjb2xvcnMiLCJjdXN0b21Tb3J0T3JkZXIiLCJjaGFydE5hbWUiLCJkaXNwbGF5VG90YWwiLCJzb3J0QXR0cmlidXRlIiwic29ydE9yZGVyIiwidW5pdCIsInVuaXRQb3NpdGlvbiIsImNhblJlbmRlciIsInNldENhblJlbmRlciIsInVzZVN0YXRlIiwiY29udGFpbmVyUmVmIiwidXNlUmVmIiwidG9vbHRpcFJlZiIsImNvbG9yQXJyYXkiLCJ0b3RhbCIsInNldFRvdGFsIiwic3Ryb2tlV2lkdGgiLCJjdXJyZW50SW5kZXgiLCJwcmVTZWdtZW50c1RvdGFsTGVuZ3RoIiwic29ydEluc3RycyIsInNldFRvb2x0aXBQb3NpdGlvbiIsImV2ZW50IiwiY3Vyc29yU2l6ZSIsIngiLCJwYWdlWCIsInkiLCJwYWdlWSIsImN1cnJlbnQiLCJzZXRQcm9wZXJ0eSIsInNob3dIZ2hsaWdodFBhcnQiLCJjdXJyZW50Q29udGFpbmVyIiwiaGlkZUhpZ2hsaWdodFBhcnQiLCJzaG93VG9vbHRpcCIsImluZGV4IiwiY2xhc3NMaXN0IiwiYWRkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhpZGVUb29sdGlwIiwicmVtb3ZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhbGNUb3RhbCIsInRvdGFscyIsIml0ZW1zIiwibWFwIiwiaXRlbSIsInB1c2giLCJOdW1iZXIiLCJnZXQiLCJkaXNwbGF5VmFsdWUiLCJyZWR1Y2UiLCJhIiwiYiIsInNldFNvcnRPcmRlciIsInNvcnRhYmxlIiwiaWQiLCJ1c2VFZmZlY3QiLCJzdGF0dXMiLCJsZW5ndGgiLCJyYWRpdXMiLCJjaXJjdW1mZXJlbmNlIiwiTWF0aCIsIlBJIiwic3RhcnRBbmdsZSIsInNlZ21lbnRUb3RhbExlbmd0aCIsInRoaXNUb3RhbCIsInJvdW5kIiwiZWxlbWVudCIsInZhbHVlIiwiYmFja2dyb3VuZENvbG9yIl0sIm1hcHBpbmdzIjoiOztFQUFBLFNBQVNBLFdBQVQsQ0FBcUJDLEdBQXJCLEVBQTBCQyxHQUExQixFQUErQjtFQUM3QixNQUFLQSxHQUFHLEtBQUssS0FBSyxDQUFsQixFQUFzQkEsR0FBRyxHQUFHLEVBQU47RUFDdEIsTUFBSUMsUUFBUSxHQUFHRCxHQUFHLENBQUNDLFFBQW5COztFQUVBLE1BQUksQ0FBQ0YsR0FBRCxJQUFRLE9BQU9HLFFBQVAsS0FBb0IsV0FBaEMsRUFBNkM7RUFBRTtFQUFTOztFQUV4RCxNQUFJQyxJQUFJLEdBQUdELFFB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
